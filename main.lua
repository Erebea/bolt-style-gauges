local bolt = require("bolt")
bolt.checkversion(1, 0)

local base64 = require("base64")

local unitspertile = 512

local ruleset = {}
local rules = {}
local modules = {
  chat = require("modules.chat.chat"),
  buffs = require("modules.buffs.buffs"),
  popup = require("modules.popup.popup"),
}
-- interface scaling value
scale = 1
-- modern or legacy interface, I haven't made legacy assets yet
intstyle = "modern"
-- the width of the gauge
gw = 260 * scale
-- the height of the gauge
gh = 44 * scale
-- x coordinate of the gauge
gx = 535
-- y coordinate of the gauge
gy = 550
    -- middle position of the gauge
gm = gx + ( gw / 2)
    -- bottom of the gauge
gb = gy + gh
    -- right of the gauge
gr = gx + gw

-- local opentempbrowser = function (url)
--   local browser = bolt.createbrowser(0, 0, url)
--     browser:oncloserequest(function () menubrowser:close() end)
--     browser:open()
--     browser:close()
--   end
-- end

local cbstyle = "none"
local activespell = "no-spell"
local hidegauge = false

local buffs = {
    darkness = {},
    necrosis = {},
    residualsouls = {},
    livingdeath = {},
    splitsoul = {},
    phantomguardian = {},
    vengefulghost = {},
    putridzombie = {},
    skeletonwarrior = {},
    deathmark = {},
    bloat = {},
    threadsoffate = {},
    sunshine = {},
    exsanguinate = {},
    incitefear = {},
    frostsurge = {},
    tsunami = {},
    animatedead = {},
    temporalanomaly = {},
    conflagrate = {},
    corruptionessence = {},
    ruin = {},
    sorrow = {},
    torment = {},
    soulfire = {},
}

local models = {
  temporalanomaly = { center = bolt.point(0, 200,0), boxsize = 500, boxthickness = 100},
}

local elements = {
  bank = {},
  central = {},
  lobby = {},
}

for _, model in pairs(models) do
  model.dohighlight = true
end

local bloattimer = 0

local checkframe = false
local checktime = bolt.time()
local checkinterval = 500000 -- check twice per second
local nextrender2dbuff = nil
local nextrender2ddebuff = nil
local nextrender2dpxleft = 0
local nextrender2dpxtop = 0

for name, buff in pairs(buffs) do
  buff.name = name
  buff.active = false
end

local rgbaleniency = 2.5 / 255.0

-- compares rgb 0-1 to target values using a leniency value
local function rougheqrgb (r, g, b, tr, tg, tb)
  return math.abs(r - (tr / 255.0)) <= rgbaleniency and math.abs(g - (tg / 255.0)) <= rgbaleniency and math.abs(b - (tb / 255.0)) <= rgbaleniency
end

-- compares rgba 0-1 to target values using a leniency value
local function rougheqrgba (r, g, b, a, tr, tg, tb, ta)
  return rougheqrgb(r, g, b, tr, tg, tb) and math.abs(a - (ta / 255.0)) <= rgbaleniency
end

local any3dobjectexists = false
local any3dobjectfound = false

local redpixel = bolt.createsurfacefromrgba(1, 1, "\xD0\x10\x10\xFF")
local blackpixel = bolt.createsurfacefromrgba(1, 1, "\x00\x00\x00\xFF")

local render3dlookup = {
  [600] = function (event)
    -- temporal anomaly
    local anim = event:animated()
    local x, y, z = event:vertexpoint(1):get()
    if anim and x == -0 and y == 32 and z == -224 then return models.temporalanomaly end
    return nil
  end,
}

local rendericonlookup1godbookmatch = function (event)
  local x, y, z = event:modelvertexpoint(1, 1):get()
  if x == -7 and y == 67 and z == 81 then return buffs.godbook, nil end
  return nil, nil
end

local rendericonlookup1 = {

  [2811] = function (event)
    local x, y, z = event:modelvertexpoint(1, 1):get()
    if x == -76 and y == 35 and z == -27 then return buffs.grimoire, nil end
    return nil, nil
  end,

  [2382] = function (event)
    local x, y, z = event:modelvertexpoint(1, 26):get()
    if not (x == 0 and y == 5 and z == -202) then return nil end
    local r, g, b, _ = event:modelvertexcolour(1, 26)
    if rougheqrgb(r, g, b, 127, 127, 127) then return buffs.soulfire, nil end
    return nil, nil
  end,

  [2460] = rendericonlookup1godbookmatch, -- wen
  [2484] = rendericonlookup1godbookmatch, -- ful
  [2502] = rendericonlookup1godbookmatch, -- jas
  [2856] = rendericonlookup1godbookmatch, -- elidinis
}

local rendericonlookup2 = {
  [24] = function (event)
    -- note: perfect plus and supreme overload have the same icon, so we can't distinguish them.
    -- here we assume the icon is a perfect plus potion since those are far more popular/useful.
    if event:modelvertexcount(2) == 1626 then
      local x, y, z = event:modelvertexpoint(2, 1):get()
      if not (x == -30 and y == 11 and z == -19) then return nil end
      local r, g, b, _ = event:modelvertexcolour(2, 1626)
      if rougheqrgb(r, g, b, 69, 147, 168) then return buffs.overload, nil end -- elder overload icon
      if rougheqrgb(r, g, b, 126, 202, 223) then return buffs.perfectplus, nil end
    end
    return nil, nil
  end,
}

local function drawbox (worldpoint, viewmatrix, projmatrix, boxradius, boxthickness)
  local px, py, pz = worldpoint:transform(viewmatrix):get()
  local left, top, depth = bolt.point(px - boxradius, py + boxradius, pz):transform(projmatrix):aspixels()
  local right, bottom, _ = bolt.point(px + boxradius, py - boxradius, pz):transform(projmatrix):aspixels()
  local leftinner, topinner, _ = bolt.point(px + boxthickness - boxradius, py + boxradius - boxthickness, pz):transform(projmatrix):aspixels()
  if depth < 0.0 or depth > 1.0 then return end
  left = math.floor(left)
  top = math.floor(top)
  right = math.floor(right)
  bottom = math.floor(bottom)
  local width = right - left
  local height = bottom - top
  local edgew = leftinner - left
  local edgeh = topinner - top
  redpixel:drawtoscreen(0, 0, 1, 1, left, top, width, edgeh) -- top
  redpixel:drawtoscreen(0, 0, 1, 1, left, top, edgew, height) -- left
  redpixel:drawtoscreen(0, 0, 1, 1, right - edgew, top, edgew, height) -- right
  redpixel:drawtoscreen(0, 0, 1, 1, left, bottom - edgeh, width, edgeh) -- bottom
  blackpixel:drawtoscreen(0, 0, 1, 1, left, top, width, 1) -- top
  blackpixel:drawtoscreen(0, 0, 1, 1, left, top, 1, height) -- left
  blackpixel:drawtoscreen(0, 0, 1, 1, right - 1, top, 1, height) -- right
  blackpixel:drawtoscreen(0, 0, 1, 1, left, bottom - 1, width, 1) -- bottom
  blackpixel:drawtoscreen(0, 0, 1, 1, left + edgew, top + edgeh, width - (edgew * 2), 1) -- top
  blackpixel:drawtoscreen(0, 0, 1, 1, left + edgew, top + edgeh, 1, height - (edgeh * 2)) -- left
  blackpixel:drawtoscreen(0, 0, 1, 1, right - (edgew + 1), top + edgeh, 1, height - (edgeh * 2)) -- right
  blackpixel:drawtoscreen(0, 0, 1, 1, left + edgew, bottom - (edgeh + 1), width - (edgew * 2), 1) -- bottom
end

local setbuffdetails = function (buff, isvalid, number, parensnumber)
  if isvalid then
    buff.number = number
    buff.parensnumber = parensnumber
    buff.active = true
    buff.foundoncheckframe = true
  end
end

local setuidetails = function (element, exists, x, y)
  if x then
    element.x = x
    element.y = y
    element.active = true
    element.foundoncheckframe = true
  end
end

bolt.onrender2d(function (event)
  local t = bolt.time()
  if not (checkframe or docheckxpgain) then return end

  if nextrender2dbuff then
    setbuffdetails(nextrender2dbuff, modules.buffs:tryreadbuffdetails(event, 1, nextrender2dpxleft, nextrender2dpxtop, true))
    nextrender2dbuff = nil
  end
  if nextrender2ddebuff then
    setbuffdetails(nextrender2ddebuff, modules.buffs:tryreadbuffdetails(event, 1, nextrender2dpxleft, nextrender2dpxtop, false))
    nextrender2ddebuff = nil
  end

  local vertexcount = event:vertexcount()
  local verticesperimage = event:verticesperimage()
  for i = 1, vertexcount, verticesperimage do
    local ax, ay, aw, ah, _, _ = event:vertexatlasdetails(i)
    if checkframe then
      local pxleft, pxtop = event:vertexxy(i + 2)
      local readbuff = function (buff, isbuff)
        setbuffdetails(buff, modules.buffs:tryreadbuffdetails(event, i + verticesperimage, pxleft, pxtop, isbuff))
      end
      local readuielement = function (element, exists)
        setuidetails(element, i + verticesperimage, pxleft, pxtop, exists)
      end

      if aw == ah then
        if aw == 60 then
          if event:texturecompare(ax, ay + 30, "\x21\x4d\x6c\xff\x25\x55\x74\xff\x28\x5f\x81\xff\x2c\x69\x8c\xff\x2f\x6e\x94\xff\x2d\x67\x90\xff\x27\x5a\x85\xff\x26\x52\x80\xff\x27\x55\x86\xff\x29\x5b\x8c\xff\x2b\x61\x93\xff\x2d\x67\x99\xff\x2f\x6d\x9f\xff\x32\x74\xa7\xff\x36\x7b\xad\xff\x39\x83\xb5\xff\x3a\x8a\xb9\xff\x3b\x9e\xc6\xff\x43\xd3\xe4\xff\x4e\xf3\xf3\xff\x48\xd5\xe4\xff\x41\xb1\xd3\xff\x44\xb2\xd5\xff\x46\xb7\xd8\xff\x47\xc3\xdd\xff\x58\xee\xef\xff\x55\xe1\xea\xff\x47\xc4\xde\xff\x48\xc4\xde\xff\x4d\xd2\xe4\xff\x5e\xf2\xf0\xff\x4f\xd6\xe5\xff\x47\xc2\xdd\xff\x46\xc2\xdc\xff\x56\xde\xe8\xff\x5e\xf3\xf1\xff\x46\xca\xde\xff\x3e\xae\xd1\xff\x3e\xa8\xcd\xff\x3d\xa7\xcc\xff\x45\xca\xde\xff\x4c\xf1\xf3\xff\x43\xd6\xe5\xff\x38\x9b\xc3\xff\x36\x7f\xb3\xff\x34\x79\xac\xff\x2f\x70\xa2\xff\x2c\x68\x9a\xff\x2a\x61\x93\xff\x28\x5a\x8b\xff\x27\x55\x85\xff\x26\x4f\x80\xff\x24\x4c\x7a\xff\x22\x4a\x76\xff\x20\x46\x70\xff\x1e\x41\x69\xff\x1d\x3e\x64\xff\x1c\x3d\x60\xff\x1c\x3e\x5e\xff\x1d\x3e\x5d\xff") then
                    readbuff(buffs.sunshine, true)
          elseif event:texturecompare(ax, ay + 30, "\x0e\x12\x2d\xff\x0e\x12\x2d\xff\x06\x15\x23\xff\x07\x12\x1a\xff\x07\x12\x1a\xff\x07\x12\x1a\xff\x06\x15\x23\xff\x0d\x21\x3d\xff\x0e\x2f\x4f\xff\x0e\x2f\x4f\xff\x22\x3e\x50\xff\x0d\x21\x3d\xff\x02\x10\x2d\xff\x02\x10\x2d\xff\x3a\x3c\x52\xff\xb8\x90\x4b\xff\x90\x8c\x69\xff\x8f\x63\x49\xff\x3a\x3c\x52\xff\x77\x4e\x3b\xff\xfb\xba\x7d\xff\xf7\xf2\x2b\xff\xef\xca\x43\xff\xf0\xec\x82\xff\xf7\xf6\xf1\xff\xfb\xfd\xfd\xff\xc7\x76\x5c\xff\x7a\x29\x0d\xff\x7a\x29\x0d\xff\x81\x42\x15\xff\x9e\x43\x16\xff\x9f\x5d\x1f\xff\x9f\x5d\x1f\xff\x95\x2b\x09\xff\x7a\x29\x0d\xff\x7a\x29\x0d\xff\xa4\x71\x57\xff\xce\xd4\xd4\xff\xeb\xe8\xea\xff\xfb\xfd\xfd\xff\xfb\xfd\xfd\xff\xea\xc8\xb2\xff\x60\x17\x08\xff\x2d\x05\x03\xff\x49\x0b\x05\xff\xac\x8c\x69\xff\xf9\xf8\xd8\xff\xf8\xf7\xbb\xff\xf0\xec\x82\xff\xf2\xe7\x60\xff\xf2\xe7\x60\xff\xef\xca\x43\xff\xf2\x9f\x3e\xff\x88\x51\x3a\xff\x1a\x20\x50\xff\x03\x20\x51\xff\x03\x21\x3e\xff\x1e\x31\x4a\xff\x18\x38\x6d\xff\x1a\x20\x50\xff") then
                    readbuff(buffs.ruin, true)
          elseif event:texturecompare(ax, ay + 20, "\x00\x00\x01\x2a\x00\x00\x01\x6e\x3e\x25\x41\xca\x75\x3d\x7e\xfe\x61\x35\x6e\xff\x4e\x2f\x5a\xff\x4e\x2f\x5a\xff\x4f\x31\x66\xff\x4c\x4c\x71\xff\x3d\x49\x8f\xff\x48\x57\xac\xff\x54\xbf\xf9\xff\xc9\xeb\xfc\xff\xfc\xfd\xfc\xff\xfc\xfd\xfc\xff\xe6\xf5\xf9\xff\xa0\xc9\xec\xff\xc9\xeb\xfc\xff\xe6\xf5\xf9\xff\xa0\xc9\xec\xff\x55\x70\xa7\xff\x17\x2e\x31\xff\x0b\x15\x40\xff\x2d\x27\x38\xff\x96\x6f\x6c\xff\xec\xca\xb7\xff\xec\xca\xb7\xff\xec\xca\xb7\xff\xbf\x7a\x71\xff\x51\x18\x14\xff\x20\x0d\x09\xff\x44\x46\x42\xff\xec\xca\xb7\xff\xfc\xfd\xfc\xff\xfb\xef\xe0\xff\xdc\x8a\x6d\xff\x57\x28\x1f\xff\x2b\x17\x2b\xff\x20\x1b\x28\xff\x06\x03\x0c\xff\x0e\x08\x1e\xff\x20\x10\x27\xff\x34\x1a\x32\xff\x4e\x2f\x5a\xff\x4e\x2f\x5a\xff\x3e\x25\x41\xff\x3e\x25\x41\xff\x4e\x2f\x5a\xff\x61\x35\x6e\xff\x61\x35\x6e\xff\x4f\x31\x66\xff\x4e\x2f\x5a\xff\x4f\x31\x66\xff\x4f\x31\x66\xff\x4f\x35\x52\xff\x61\x35\x6e\xff\x75\x3d\x7e\xfe\x3e\x25\x41\xca\x00\x00\x01\x6e\x00\x00\x01\x29") then
                    readbuff(buffs.torment, true)       
          end
        end
        if aw == 64 then
          if event:texturecompare(ax, ay + 28, "\x26\x25\x40\xff\x26\x26\x41\xff\x26\x27\x43\xff\x25\x27\x44\xff\x25\x2b\x49\xff\x24\x32\x4f\xff\x25\x41\x56\xff\x84\xe2\x41\xff\x86\xe6\x40\xff\x71\xc4\x48\xff\x20\x42\x5f\xff\x23\x39\x5a\xff\x23\x34\x58\xff\x23\x32\x59\xff\x23\x32\x5a\xff\x23\x33\x5b\xff\x22\x33\x5e\xff\x21\x34\x5e\xff\x21\x34\x5f\xff\x21\x35\x61\xff\x20\x37\x64\xff\x1f\x3f\x69\xff\x1d\x48\x70\xff\x6c\xc1\x4d\xff\x87\xe6\x40\xff\x86\xe5\x41\xff\x86\xe5\x41\xff\x86\xe6\x40\xff\x70\xc8\x4c\xff\x1d\x4a\x72\xff\x1d\x3f\x6c\xff\x1e\x39\x6a\xff\x1e\x39\x6a\xff\x1e\x3f\x6c\xff\x1d\x4a\x72\xff\x71\xc8\x4b\xff\x86\xe6\x40\xff\x86\xe5\x40\xff\x86\xe5\x40\xff\x87\xe6\x40\xff\x6c\xc1\x4d\xff\x1c\x48\x70\xff\x1f\x3e\x68\xff\x1f\x38\x65\xff\x21\x35\x61\xff\x21\x34\x5e\xff\x21\x34\x5f\xff\x22\x33\x5c\xff\x22\x32\x5c\xff\x22\x32\x5a\xff\x23\x32\x58\xff\x23\x34\x59\xff\x22\x39\x5b\xff\x21\x42\x60\xff\x71\xc5\x47\xff\x86\xe5\x40\xff\x84\xe2\x41\xff\x25\x42\x57\xff\x24\x32\x4f\xff\x25\x2a\x49\xff\x26\x28\x45\xff\x26\x27\x43\xff\x26\x26\x41\xff\x26\x25\x3e\xff") then
                readbuff(buffs.corruptionessence, true)  
          end
        end
        if aw == 81 then
            if event:texturecompare(ax, ay + 40, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x0a\x00\x00\x00\x14\x00\x00\x00\x22\x00\x00\x00\x33\xad\x17\x7e\xdf\xba\x15\x74\xff\xbc\x12\x63\xff\xbd\x0e\x51\xff\xbd\x0c\x3e\xff\xbe\x09\x2d\xff\xbd\x07\x1c\xff\xbc\x06\x19\xff\xbc\x06\x19\xff\xbb\x06\x19\xff\xbb\x06\x19\xff\xbb\x06\x19\xff\xba\x06\x18\xff\xba\x06\x19\xff\xbb\x08\x1a\xff\xdf\x3f\x62\xff\xfa\x41\x60\xff\xfb\x34\x4f\xff\xfb\x33\x4e\xff\xfb\x33\x4e\xff\xfb\x33\x4e\xff\xfb\x33\x4e\xff\xfb\x33\x4e\xff\xfb\x33\x4d\xff\xfb\x33\x4d\xff\xfb\x33\x4d\xff\xfc\x4c\x52\xff\xfd\xd8\x6c\xff\xfd\xeb\x6f\xff\xfd\xeb\x6f\xff\xfd\xeb\x6f\xff\xfd\xeb\x6f\xff\xfd\xeb\x6e\xff\xfd\xeb\x6e\xff\xfd\xeb\x6d\xff\xfd\xea\x6c\xff\xfd\xea\x6b\xff\xf0\xd5\x63\xff\x8b\x73\x42\xff\x80\x67\x46\xff\x83\x67\x4d\xff\x84\x67\x55\xff\x73\x59\x50\xb4\x00\x00\x00\x31\x00\x00\x00\x21\x00\x00\x00\x14\x00\x00\x00\x0b\x00\x00\x00\x05\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00") then
                    readbuff(buffs.exsanguinate, true)
            elseif event:texturecompare(ax, ay + 45, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x0b\x00\x00\x00\x16\x00\x00\x00\x24\x04\x06\x08\x37\xa9\xd2\xf3\xf8\xaf\xd9\xf6\xff\xb1\xdd\xf7\xff\xb3\xe0\xf6\xff\xb5\xe3\xf5\xff\xb6\xe4\xf6\xff\xb8\xe7\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xb9\xe9\xf4\xff\xbb\xea\xf5\xff\xd1\xf1\xf8\xff\xfa\xfe\xfd\xff\xfa\xfe\xfc\xff\xfa\xfe\xfc\xff\xf1\xf8\xf5\xff\xc9\xd9\xd5\xff\xc4\xd6\xd0\xff\xc4\xd5\xd1\xff\xc4\xd6\xd1\xff\xc4\xd6\xd2\xff\xc4\xd6\xd2\xff\xc4\xd6\xd2\xff\xc4\xd6\xd2\xff\xc4\xd6\xd2\xff\xc4\xd5\xd1\xff\xad\xbb\xbc\xff\x81\x7b\x87\xff\x7f\x71\x84\xff\x7e\x6e\x86\xff\x7e\x6d\x89\xff\x7e\x6c\x8d\xff\x65\x7d\xa5\xff\x2d\x64\x7f\x80\x00\x00\x00\x2e\x00\x00\x00\x1e\x00\x00\x00\x12\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00") then
              readbuff(buffs.incitefear, true)
              if buffs.incitefear.parensnumber then
                readbuff(buffs.incitefear, true)
              else
                readbuff(buffs.glacialembrace, true)
              end
            elseif event:texturecompare(ax, ay + 20, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x32\x2d\x15\x5f\x4d\x3f\xf4\x64\x52\x3e\xff\x68\x58\x3c\xff\xa6\x97\x65\xff\xde\xd0\x8a\xff\xe2\xd5\x8c\xff\xe3\xd6\x8c\xff\xe3\xd6\x8c\xff\xe4\xd6\x8c\xff\xe4\xd6\x8c\xff\xe4\xd6\x8c\xff\xe3\xd6\x8c\xff\xe3\xd6\x8c\xff\xe2\xd4\x8f\xff\xbf\xb9\x95\xff\x8b\x92\x9f\xff\x88\x8e\x9f\xff\x86\x8e\xa0\xff\x87\x8f\xa1\xff\x87\x8f\xa1\xff\x88\x8f\xa1\xff\x89\x90\xa1\xff\x8a\x90\xa1\xff\x8a\x90\xa1\xff\x8a\x91\xa2\xff\x8b\x91\xa3\xff\x8b\x92\xa3\xff\x8b\x91\xa3\xff\x8a\x91\xa3\xff\x8a\x91\xa3\xff\x8a\x91\xa1\xff\x73\x78\x8c\xff\x2e\x2f\x4d\xff\x2b\x2c\x4a\xff\x2b\x2b\x49\xff\x2a\x2b\x49\xff\x2b\x2b\x4a\xff\x2b\x2b\x4b\xff\x2b\x2d\x4b\xff\x2b\x2d\x4b\xff\x28\x29\x47\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00") then
                    readbuff(buffs.animatedead, true)
            end
        end
        if aw == 72 then
            if event:texturecompare(ax, ay + 45, "\xe2\x2c\x2d\xff\xc4\xac\x03\xff\xef\xcf\x1c\xff\xf8\xd7\x1c\xff\xfd\xde\x1f\xff\xfb\xdb\x17\xff\xff\xe0\x1a\xff\xfc\xdc\x25\xff\xff\xde\x22\xff\xff\xdf\x0a\xff\xff\xd2\x0c\xff\xcc\x55\x0a\xff\xc7\x4a\x0b\xff\xfd\xc4\x10\xff\xed\x86\x0f\xff\xdb\x5e\x10\xff\xdd\x68\x12\xff\xdb\x60\x13\xff\xd8\x4f\x13\xff\xea\x91\x1c\xff\xff\xe4\x2d\xff\xf6\x99\x20\xff\xf1\x76\x1b\xff\xf9\xca\x2c\xff\xfa\xd3\x28\xff\xff\xec\x24\xff\xff\xce\x26\xff\xf4\x70\x21\xff\xe4\x51\x20\xff\xbb\x45\x1f\xff\xba\x44\x20\xff\xb7\x41\x21\xff\xba\x47\x22\xff\xb9\x3e\x22\xff\x9c\x31\x20\xff\x9c\x33\x22\xff\xa3\x35\x22\xff\xaf\x37\x22\xff\xaa\x37\x22\xff\x7f\x16\x1d\xff\xcd\x48\x22\xff\xff\xf3\x2f\xff\xfc\xb2\x29\xff\xc4\x1d\x1d\xff\xc0\x45\x1f\xff\xc6\x43\x1e\xff\xd8\x4b\x1f\xff\xfe\xbb\x23\xff\xff\xd3\x23\xff\xff\xe3\x21\xff\xff\xe7\x1f\xff\xff\xdd\x1e\xff\xff\xe4\x1c\xff\xf6\x9f\x19\xff\xc7\x27\x10\xff\xce\x46\x12\xff\xd3\x52\x11\xff\xd1\x4e\x0f\xff\xcb\x47\x0e\xff\xc9\x45\x0c\xff\xcb\x47\x0b\xff\xd2\x52\x0a\xff\xcf\x4d\x08\xff\xc5\x43\x06\xff\xcd\x51\x06\xff\xe1\x62\x04\xff\xeb\x65\x00\xff\xd2\x3c\x00\xff\xea\x75\x00\xff\xf1\xb3\x00\xff\xbc\x6a\x00\xff\xe2\x2d\x2d\xff") then
                    readbuff(buffs.conflagrate, true)
            end
        end
        if aw == 120 then
            if event:texturecompare(ax, ay + 50, "\x3c\x1d\x8d\xff\x3d\x1e\x8f\xff\x3f\x1e\x91\xff\x3f\x1f\x93\xff\x40\x1f\x94\xff\x41\x20\x96\xff\x42\x21\x98\xff\x42\x20\x9a\xff\x44\x21\x9b\xff\x44\x21\x9b\xff\x46\x22\x9d\xff\x48\x23\x9e\xff\x48\x24\x9e\xff\x49\x25\x9f\xff\x4a\x25\xa1\xff\x4c\x25\xa3\xff\x50\x25\xa6\xff\x57\x24\xab\xff\x62\x24\xb2\xff\x74\x24\xbb\xff\x90\x26\xc5\xff\xba\x2e\xcf\xff\xc3\x2d\xc8\xff\x95\x23\xb1\xff\x88\x21\xab\xff\x71\x1c\xa3\xff\x4a\x14\x94\xff\x3d\x11\x91\xff\x30\x0f\x87\xff\x23\x0e\x73\xff\x26\x10\x76\xff\x32\x16\x82\xff\x4c\x21\xa0\xff\x7f\x2f\xbb\xff\xb1\x42\xd0\xff\xce\x67\xe0\xff\xea\xbd\xf3\xff\xfc\xff\xfc\xff\xfb\xfb\xfb\xff\xfb\xfb\xfb\xff\xfb\xfb\xfb\xff\xfc\xff\xfb\xff\xf7\xec\xfa\xff\xe7\xb8\xf4\xff\xe9\xbb\xf2\xff\xe5\xa0\xeb\xff\xe4\x91\xe8\xff\xe7\x8d\xe8\xff\xc9\x64\xd8\xff\xa6\x4d\xcb\xff\x83\x39\xbd\xff\x39\x17\x83\xff\x14\x08\x5b\xff\x0e\x08\x54\xff\x0b\x07\x3a\xff\x08\x07\x0c\xff\x07\x07\x07\xff\x07\x07\x08\xff\x07\x07\x08\xff\x08\x07\x08\xff\x08\x07\x21\xff\x0b\x08\x50\xff\x0e\x09\x57\xff\x16\x08\x62\xff\x45\x1d\x93\xff\x65\x30\xb3\xff\x7c\x32\xb9\xff\xc3\x56\xd6\xff\xe8\x8d\xe9\xff\xe3\x8e\xe8\xff\xe6\xa0\xec\xff\xef\xc8\xf3\xff\xf1\xd3\xf5\xff\xf1\xd4\xf5\xff\xf1\xd4\xf5\xff\xf1\xd3\xf5\xff\xee\xc3\xf2\xff\xe3\x99\xea\xff\xe4\x8d\xe9\xff\xe7\x86\xe9\xff\xcb\x4e\xd8\xff\x7c\x2f\xb9\xff\x5f\x2d\xae\xff\x37\x18\x86\xff\x1b\x0b\x64\xff\x27\x0d\x69\xff\x57\x16\x90\xff\x74\x1c\xa6\xff\x8d\x20\xb1\xff\xab\x26\xc0\xff\xb8\x29\xc8\xff\xbc\x2b\xce\xff\xb7\x2b\xd0\xff\xaa\x29\xcd\xff\x98\x26\xc9\xff\x83\x23\xc2\xff\x6a\x23\xb7\xff\x5d\x24\xaf\xff\x53\x24\xa9\xff\x4c\x25\xa4\xff\x4a\x25\xa1\xff\x48\x23\x9f\xff\x46\x23\x9d\xff\x45\x23\x9b\xff\x44\x22\x9a\xff\x44\x21\x98\xff\x42\x21\x97\xff\x42\x21\x95\xff\x40\x21\x94\xff\x3f\x20\x92\xff\x3f\x20\x91\xff\x3e\x1f\x8f\xff\x3d\x1e\x8e\xff\x3c\x1e\x8b\xff\x3b\x1e\x89\xff\x3a\x1d\x89\xff\x39\x1d\x87\xff\x39\x1c\x84\xff\x39\x1c\x82\xff\x38\x1c\x80\xff") then
                    readbuff(buffs.livingdeath, true)
              elseif event:texturecompare(ax, ay + 60, "\x10\x06\x1c\x0e\x10\x06\x1c\x8f\x53\x34\x77\xff\x6e\x4b\x99\xff\x62\x3e\x8b\xff\x58\x33\x82\xff\x61\x3b\x92\xff\x4f\x29\x7e\xff\x44\x1f\x71\xff\x43\x1d\x74\xff\x44\x1c\x79\xff\x47\x1b\x84\xff\x4f\x1e\x96\xff\x5c\x23\xae\xff\x5f\x4e\xca\xff\x59\xbf\xee\xff\x55\xba\xec\xff\x52\xbf\xed\xff\x50\xc0\xed\xff\x48\xc7\xef\xff\x36\xd3\xf2\xff\x36\xd1\xf2\xff\x36\xd1\xf2\xff\x35\xd2\xf2\xff\x35\xd1\xf2\xff\x36\xcf\xf1\xff\x34\xcf\xf2\xff\x2f\xd3\xf3\xff\x31\xd0\xf2\xff\x34\xcc\xf1\xff\x33\xcc\xf1\xff\x35\xca\xf0\xff\x36\xc8\xf0\xff\x31\xce\xf1\xff\x20\xde\xf6\xff\x1b\xe8\xf7\xff\x1d\xe5\xf7\xff\x1f\xd8\xf2\xff\x28\xba\xe7\xff\x3a\x7f\xd4\xff\x24\xc5\xee\xff\x13\xeb\xf9\xff\x12\xea\xf9\xff\x0a\xf1\xfb\xff\x0a\xf1\xfb\xff\x08\xf3\xfc\xff\x0f\xed\xfa\xff\x16\xe7\xf8\xff\x16\xe6\xf8\xff\x16\xe5\xf8\xff\x17\xe5\xf8\xff\x17\xe5\xf8\xff\x21\xd9\xf5\xff\x46\x2e\xa0\xff\x44\x16\x7f\xff\x40\x1b\x73\xff\x3d\x1c\x69\xff\x3b\x1d\x62\xff\x3a\x1e\x5e\xff\x3a\x1e\x5b\xff\x39\x1d\x5a\xff\x38\x1d\x5b\xff\x39\x1c\x5f\xff\x3b\x1b\x64\xff\x3d\x1a\x6c\xff\x41\x19\x79\xff\x45\x18\x8a\xff\x34\x99\xda\xff\x27\xd9\xf5\xff\x28\xd4\xf4\xff\x28\xd6\xf5\xff\x28\xd7\xf5\xff\x29\xd6\xf5\xff\x30\xd0\xf3\xff\x32\xcf\xf3\xff\x21\xdd\xf6\xff\x0f\xec\xfa\xff\x0f\xed\xfa\xff\x15\xe8\xf8\xff\x23\xdb\xf4\xff\x45\x4f\xc2\xff\x4d\x14\xa4\xff\x44\x35\xb1\xff\x38\x66\xc5\xff\x30\x97\xda\xff\x2f\xb2\xe7\xff\x2c\xce\xf0\xff\x2b\xd9\xf3\xff\x2e\xd5\xf3\xff\x31\xd0\xf2\xff\x32\xcd\xf1\xff\x32\xce\xf1\xff\x25\xda\xf4\xff\x25\xdc\xf5\xff\x26\xdc\xf5\xff\x27\xdb\xf5\xff\x2b\xd9\xf4\xff\x2e\xd8\xf4\xff\x2e\xd8\xf4\xff\x2e\xd9\xf4\xff\x2d\xda\xf4\xff\x2d\xda\xf4\xff\x3e\xce\xf1\xff\x48\xc6\xef\xff\x47\xc8\xf0\xff\x50\xb4\xea\xff\x55\x2b\xb4\xff\x4b\x15\x94\xff\x47\x19\x88\xff\x45\x1a\x7c\xff\x43\x1a\x76\xff\x44\x1d\x73\xff\x59\x2f\x8b\xff\x5e\x34\x8d\xff\x4d\x25\x75\xff\x58\x30\x7f\xff\x6d\x47\x99\xff\x57\x37\x7d\xff\x10\x06\x1c\x90\x10\x06\x1c\x0e") then
                    readbuff(buffs.sorrow, true)
            end
        end
        if aw == 128 then
            if event:texturecompare(ax, ay + 80, "\x25\x2c\x47\xff\x25\x2c\x47\xff\x25\x2c\x47\xff\x25\x2c\x47\xff\x25\x2c\x47\xff\x25\x2d\x48\xff\x25\x2d\x48\xff\x25\x2e\x48\xff\x25\x2c\x48\xff\x25\x2d\x48\xff\x25\x2d\x48\xff\x25\x2e\x49\xff\x26\x2e\x49\xff\x26\x2e\x4a\xff\x28\x2e\x4a\xff\x2a\x2d\x4a\xff\x2b\x2d\x4a\xff\x2c\x2d\x49\xff\x2d\x2d\x4a\xff\x31\x2d\x49\xff\x3f\x27\x44\xff\x4f\x22\x3d\xff\x5d\x1c\x37\xff\x61\x1b\x36\xff\x64\x1b\x36\xff\x64\x1b\x35\xff\x65\x1b\x36\xff\x66\x1c\x37\xff\x66\x1c\x37\xff\x65\x1c\x39\xff\x67\x1d\x3a\xff\x68\x1f\x3b\xff\x68\x20\x3e\xff\x69\x21\x3f\xff\x6b\x22\x41\xff\x6c\x24\x46\xff\x6f\x27\x4a\xff\x73\x2b\x4e\xff\x77\x2f\x52\xff\x7e\x34\x5b\xff\x87\x3b\x65\xff\x9f\x58\x82\xff\xca\x84\xb1\xff\xea\xaf\xd8\xff\xfc\xc9\xef\xff\xfc\xcd\xee\xff\xfd\xd5\xf2\xff\xfd\xda\xf3\xff\xfd\xde\xf2\xff\xfe\xe1\xf3\xff\xfe\xe4\xf2\xff\xfe\xe7\xf1\xff\xfe\xea\xf0\xff\xfe\xec\xef\xff\xfe\xee\xee\xff\xfe\xf1\xec\xff\xfe\xf2\xea\xff\xfe\xf5\xe8\xff\xfe\xf7\xe5\xff\xfe\xf9\xe2\xff\xfe\xfa\xdf\xff\xfe\xfc\xdd\xff\xfe\xfd\xd8\xff\xfe\xfd\xd4\xff\xfe\xfe\xce\xff\xfe\xfe\xcb\xff\xfe\xfe\xc5\xff\xfe\xfe\xbf\xff\xfe\xfe\xb6\xff\xfe\xfe\xac\xff\xfe\xfe\xa2\xff\xfe\xfe\x96\xff\xfe\xfe\x88\xff\xfe\xfe\x7b\xff\xfe\xfb\x6f\xff\xdf\xd0\x70\xff\x7a\x66\x74\xff\x5f\x4f\x6d\xff\x50\x42\x69\xff\x47\x3c\x64\xff\x40\x38\x60\xff\x3d\x33\x5e\xff\x38\x31\x5b\xff\x36\x30\x59\xff\x35\x2f\x57\xff\x2d\x32\x58\xff\x2b\x32\x57\xff\x28\x32\x57\xff\x27\x31\x56\xff\x25\x31\x56\xff\x25\x31\x56\xff\x25\x30\x55\xff\x25\x30\x55\xff\x25\x2f\x55\xff\x24\x2f\x54\xff\x24\x2f\x53\xff\x24\x2f\x53\xff\x24\x2f\x52\xff\x28\x31\x53\xff\x2d\x36\x52\xff\x66\x5a\x47\xff\x83\x6f\x42\xff\x88\x72\x40\xff\x8b\x75\x40\xff\x8d\x76\x40\xff\x8f\x77\x40\xff\x91\x78\x40\xff\x91\x78\x3f\xff\x92\x79\x40\xff\x92\x7a\x40\xff\x94\x7b\x40\xff\x94\x7c\x41\xff\x94\x7c\x41\xff\x94\x7b\x41\xff\x8f\x78\x41\xff\x81\x6e\x44\xff\x33\x3a\x54\xff\x2a\x33\x55\xff\x25\x30\x56\xff\x24\x31\x57\xff\x23\x30\x57\xff\x24\x30\x59\xff\x26\x31\x59\xff\x25\x31\x5a\xff\x25\x32\x5b\xff\x25\x32\x5b\xff\x25\x32\x5d\xff\x25\x33\x5d\xff") then
                    readbuff(buffs.tsunami, true)
            elseif event:texturecompare(ax, ay + 50, "\x2e\x34\x38\xff\x2e\x34\x38\xff\x2e\x34\x38\xff\x2e\x34\x38\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x32\x3c\x41\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x4c\x8b\x93\xff\x49\x83\x8b\xff\x49\x83\x8b\xff\x49\x83\x8b\xff\x49\x83\x8b\xff\x49\x83\x8b\xff\x49\x83\x8b\xff\x45\x7b\x83\xff\x45\x7b\x83\xff\x45\x7b\x83\xff\x45\x7b\x83\xff\x31\x43\x46\xff\x2b\x2e\x30\xff\x2b\x2e\x30\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x23\x24\x23\xff\x1e\x22\x1b\xff\x1e\x22\x1b\xff\x2b\x34\x2c\xff\xa6\xb1\xb6\xff\xa6\xb1\xb6\xff\x95\x9b\xa0\xff\x86\x8c\x8f\xff\x86\x8c\x8f\xff\xbf\xbd\xa8\xff\xdb\xd3\xb3\xff\xdb\xcf\xa6\xff\xdb\xcf\xa6\xff\xd2\xc2\x97\xff\xa3\x82\x3c\xff\xa3\x82\x3c\xff\x9b\x7c\x38\xff\x9b\x7c\x38\xff\x96\x73\x33\xff\x8d\x6b\x2e\xff\x84\x62\x27\xff\x84\x62\x27\xff\x79\x5b\x21\xff\x79\x5b\x21\xff\x79\x5b\x21\xff\x69\x4d\x18\xff\x69\x4d\x18\xff\x69\x4d\x18\xff\x69\x4d\x18\xff\x69\x4d\x18\xff\x61\x45\x13\xff\x61\x45\x13\xff\x5d\x4d\x2f\xff\x54\x59\x5d\xff\x5e\x63\x66\xff\x6c\x73\x77\xff\x72\x89\x8d\xff\x7f\x95\x9b\xff\x31\x33\x35\xff\x1a\x1e\x15\xff\x1e\x22\x1b\xff\x23\x24\x23\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x29\x2b\x2c\xff\x2c\x32\x35\xff\x68\xc4\xcb\xff\x7e\xe1\xe7\xff\x74\xdb\xe1\xff\x74\xdb\xe1\xff\x74\xdb\xe1\xff\x74\xdb\xe1\xff\x74\xdb\xe1\xff\x74\xdb\xe1\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x70\xd3\xda\xff\x68\xc4\xcb\xff\x31\x43\x46\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x30\x35\x39\xff\x2e\x34\x38\xff\x2e\x34\x38\xff\x2e\x34\x38\xff\x2e\x34\x38\xff") then
                    readbuff(buffs.temporalanomaly, true)
            elseif event:texturecompare(ax, ay + 64, "\x1c\x16\x37\xff\x1f\x17\x3c\xff\x22\x18\x44\xff\x28\x1a\x4e\xff\x2e\x1e\x5a\xff\x37\x22\x69\xff\x40\x26\x7a\xff\x41\x26\x7f\xff\x1b\x0a\x36\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x17\x06\x2e\xff\x18\x07\x30\xff\x8b\x44\xc8\xff\xb1\x58\xfa\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x56\xf2\xff\xab\x55\xf2\xff\xb3\x59\xfc\xff\x53\x26\x7d\xff\x0e\x02\x22\xff\x18\x06\x30\xff\x18\x0b\x2e\xff\x17\x14\x28\xff\x17\x14\x28\xff\x19\x15\x2a\xff\x17\x0f\x2a\xff\x11\x07\x26\xff\x0b\x09\x1e\xff\x0c\x09\x1e\xff\x0f\x09\x23\xff\x17\x07\x30\xff\x15\x07\x2b\xff\x19\x06\x43\xff\x37\x02\xc1\xff\x3b\x03\xf4\xff\x34\x03\xf9\xff\x34\x03\xf7\xff\x34\x03\xf9\xff\x34\x03\xec\xff\x33\x04\xda\xff\x36\x03\xe4\xff\x28\x04\x8b\xff\x14\x07\x28\xff\x18\x07\x30\xff\x17\x07\x31\xff\x0e\x09\x22\xff\x0d\x09\x1f\xff\x0c\x09\x1f\xff\x0c\x09\x1f\xff\x0c\x09\x1f\xff\x0c\x09\x1f\xff\x0c\x09\x1f\xff\x0c\x09\x1f\xff\x0d\x09\x1f\xff\x0e\x09\x22\xff\x17\x07\x31\xff\x18\x07\x30\xff\x14\x07\x28\xff\x28\x04\x8b\xff\x36\x03\xe4\xff\x33\x04\xda\xff\x34\x03\xec\xff\x34\x03\xf9\xff\x34\x03\xf7\xff\x34\x03\xf9\xff\x3b\x03\xf4\xff\x37\x02\xc1\xff\x19\x06\x43\xff\x15\x07\x2b\xff\x17\x07\x30\xff\x0f\x09\x23\xff\x0b\x09\x1e\xff\x0c\x09\x1e\xff\x11\x07\x26\xff\x1b\x13\x2e\xff\x21\x1e\x33\xff\x1a\x18\x2b\xff\x1a\x18\x2a\xff\x19\x0c\x2e\xff\x18\x06\x30\xff\x0f\x02\x23\xff\x53\x26\x7e\xff\xb3\x59\xfc\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x56\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x55\xf2\xff\xab\x56\xf2\xff\xb1\x58\xfa\xff\x8b\x45\xc8\xff\x18\x07\x30\xff\x17\x06\x2e\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x18\x07\x30\xff\x1b\x09\x37\xff\x45\x27\x87\xff\x42\x27\x84\xff\x3a\x23\x74\xff\x33\x1f\x66\xff\x2c\x1b\x5b\xff\x27\x19\x52\xff\x23\x17\x4a\xff\x20\x16\x44\xff") then
                    readbuff(buffs.darkness, true)
            elseif event:texturecompare(ax, ay + 64, "\x5a\x34\xbe\xff\x59\x33\xbd\xff\x58\x33\xbc\xff\x57\x33\xbb\xff\x56\x33\xba\xff\x56\x32\xb9\xff\x55\x32\xb6\xff\x55\x31\xb5\xff\x54\x31\xb5\xff\x54\x30\xb3\xff\x54\x30\xb1\xff\x52\x30\xb0\xff\x52\x2f\xae\xff\x51\x2f\xad\xff\x4f\x2f\xac\xff\x4e\x2e\xaa\xff\x4c\x2e\xa9\xff\x4c\x2d\xa9\xff\x4d\x2d\xa8\xff\x4c\x2c\xa8\xff\x4c\x2c\xa7\xff\x4c\x2b\xa5\xff\x4a\x2a\xa5\xff\x4a\x2a\xa4\xff\x4a\x29\xa3\xff\x49\x29\xa2\xff\x48\x29\xa2\xff\x48\x29\x9f\xff\x47\x29\x9e\xff\x46\x29\x9c\xff\x45\x29\x9c\xff\x45\x27\x9c\xff\x44\x27\x9b\xff\x44\x27\x97\xff\x2d\x1c\x4c\xff\x2b\x1e\x3d\xff\x42\x32\x48\xff\x83\x70\x65\xff\x88\x75\x64\xff\x88\x74\x5f\xff\x86\x72\x5b\xff\x82\x6d\x56\xff\x69\x59\x44\xff\x67\x59\x44\xff\x91\x7d\x65\xff\x8c\x76\x5e\xff\x88\x74\x5b\xff\x87\x71\x5a\xff\x87\x72\x5b\xff\x84\x71\x5a\xff\x7c\x68\x52\xff\x68\x55\x40\xff\x61\x4f\x3b\xff\x55\x49\x37\xff\x4f\x46\x35\xff\x48\x42\x31\xff\x3f\x3d\x2d\xff\x35\x3a\x2a\xff\x36\x3b\x29\xff\x3c\x3d\x2c\xff\x3f\x40\x2f\xff\x4b\x54\x3d\xff\x59\x74\x51\xff\x4d\x6a\x44\xff\x4a\x6b\x43\xff\x4f\x7d\x4d\xff\x48\x89\x52\xff\x37\x9a\x53\xff\x33\x9e\x54\xff\x31\xa1\x55\xff\x31\xa2\x55\xff\x2e\xa7\x57\xff\x2b\xac\x5a\xff\x2b\xaf\x5b\xff\x2c\xb0\x5c\xff\x2c\xb1\x5d\xff\x2d\xb2\x5d\xff\x2c\xb4\x5f\xff\x2c\xb6\x60\xff\x2a\xba\x65\xff\x24\xc3\x69\xff\x24\xc4\x67\xff\x24\xc3\x60\xff\x23\xc6\x5f\xff\x23\xc7\x61\xff\x23\xca\x64\xff\x21\xcd\x67\xff\x1c\xe1\x7d\xff\x15\xf4\x95\xff\x15\xf3\x96\xff\x15\xef\x94\xff\x15\xe9\x8f\xff\x16\xe3\x8a\xff\x16\xd9\x84\xff\x15\xa0\x61\xff\x15\x4e\x33\xff\x16\x3b\x28\xff\x15\x37\x25\xff\x15\x33\x22\xff\x15\x30\x1f\xff\x15\x35\x22\xff\x15\x36\x24\xff\x15\x32\x21\xff\x16\x30\x21\xff\x15\x32\x22\xff\x15\x36\x24\xff\x15\x41\x2b\xff\x15\x49\x30\xff\x16\x51\x32\xff\x13\x72\x45\xff\x10\x76\x47\xff\x10\x78\x48\xff\x10\x79\x48\xff\x10\x77\x49\xff\x10\x76\x4b\xff\x10\x6f\x47\xff\x13\x5e\x3d\xff\x14\x56\x39\xff\x13\x4f\x36\xff\x13\x45\x34\xff\x14\x32\x2c\xff\x15\x25\x21\xff\x15\x1f\x1d\xff\x15\x1b\x1c\xff\x16\x1a\x1b\xff\x16\x1a\x1b\xff\x15\x1a\x1c\xff\x15\x1a\x1f\xff") then
                    readbuff(buffs.necrosis, true)
            elseif event:texturecompare(ax, ay + 64, "\x21\x0d\x5d\xff\x23\x0f\x5f\xff\x24\x10\x60\xff\x26\x12\x62\xff\x27\x13\x63\xff\x28\x14\x64\xff\x29\x15\x65\xff\x2b\x17\x67\xff\x2c\x18\x68\xff\x2d\x19\x69\xff\x2e\x1a\x6a\xff\x2f\x1b\x6b\xff\x2f\x1b\x6b\xff\x30\x1c\x6c\xff\x31\x1d\x6d\xff\x32\x1e\x6e\xff\x32\x1e\x6e\xff\x33\x1f\x6f\xff\x34\x20\x70\xff\x34\x21\x70\xff\x35\x22\x71\xff\x35\x22\x71\xff\x35\x22\x71\xff\x36\x23\x72\xff\x36\x23\x72\xff\x36\x23\x73\xff\x3a\x2d\x8a\xff\x3f\x3e\xaf\xff\x40\x42\xba\xff\x40\x42\xb8\xff\x40\x42\xb8\xff\x40\x42\xb8\xff\x40\x42\xb8\xff\x41\x40\xba\xff\x3c\x4c\xac\xff\x30\x66\x8e\xff\x36\x81\x9e\xff\x47\xa9\xc3\xff\x4f\xb8\xd0\xff\x58\xc2\xd5\xff\x62\xc8\xd9\xff\x6b\xce\xdc\xff\x80\xdc\xe4\xff\x89\xe3\xe9\xff\x8c\xe6\xea\xff\x8a\xe3\xe8\xff\x7e\xdb\xe3\xff\x73\xd5\xe0\xff\x6d\xd3\xdf\xff\x69\xd2\xdd\xff\x6a\xd2\xdd\xff\x69\xd2\xdd\xff\x67\xd1\xdc\xff\x5f\xca\xd9\xff\x50\xc0\xd3\xff\x4c\xb9\xce\xff\x43\xa3\xbf\xff\x3e\x94\xb3\xff\x3c\x8b\xaa\xff\x3b\x8a\xa9\xff\x3b\x8a\xa9\xff\x3b\x8b\xaa\xff\x3b\x8a\xa8\xff\x37\x84\x9f\xff\x33\x76\x95\xff\x37\x5d\xa0\xff\x42\x47\xb9\xff\x46\x42\xc2\xff\x44\x44\xbf\xff\x44\x45\xbf\xff\x44\x45\xbe\xff\x44\x44\xbe\xff\x44\x44\xbc\xff\x44\x41\xb4\xff\x44\x3c\xab\xff\x42\x35\x9d\xff\x3e\x2c\x8a\xff\x3b\x27\x7c\xff\x3a\x25\x78\xff\x3a\x25\x78\xff\x3a\x25\x78\xff\x3a\x25\x77\xff\x3a\x24\x77\xff\x3a\x25\x77\xff\x39\x24\x76\xff\x39\x24\x76\xff\x39\x24\x77\xff\x38\x24\x77\xff\x38\x24\x78\xff\x38\x25\x78\xff\x39\x25\x77\xff\x39\x25\x77\xff\x38\x25\x77\xff\x38\x25\x77\xff\x38\x25\x76\xff\x38\x24\x76\xff\x38\x24\x77\xff\x38\x24\x77\xff\x37\x24\x76\xff\x37\x24\x77\xff\x37\x24\x77\xff\x37\x23\x75\xff\x36\x22\x73\xff\x36\x22\x72\xff\x36\x21\x71\xff\x35\x21\x71\xff\x35\x21\x71\xff\x34\x21\x70\xff\x34\x21\x70\xff\x33\x20\x6f\xff\x33\x1e\x6e\xff\x32\x1e\x6e\xff\x31\x1d\x6d\xff\x31\x1d\x6d\xff\x2f\x1b\x6b\xff\x2f\x1b\x6b\xff\x2e\x1a\x6a\xff\x2d\x19\x69\xff\x2c\x18\x68\xff\x2b\x17\x67\xff\x2a\x16\x66\xff\x29\x15\x65\xff\x27\x13\x63\xff\x26\x12\x62\xff\x25\x11\x61\xff\x24\x10\x60\xff\x22\x0e\x5e\xff\x21\x0d\x5d\xff") then
                    readbuff(buffs.residualsouls, true)
            elseif event:texturecompare(ax, ay + 64, "\x1c\x16\x37\xff\x1d\x16\x39\xff\x1d\x16\x3c\xff\x1f\x16\x3e\xff\x20\x17\x40\xff\x22\x18\x43\xff\x23\x18\x46\xff\x23\x18\x49\xff\x25\x19\x4d\xff\x26\x19\x51\xff\x26\x1a\x54\xff\x27\x1a\x58\xff\x29\x1a\x5a\xff\x2b\x1c\x5d\xff\x2c\x1d\x60\xff\x2c\x1d\x63\xff\x2e\x1e\x67\xff\x2f\x1e\x6a\xff\x31\x1f\x6c\xff\x33\x1f\x6f\xff\x35\x20\x73\xff\x37\x20\x78\xff\x37\x21\x7c\xff\x2e\x1c\x63\xff\x20\x16\x3c\xff\x15\x10\x1b\xff\x14\x10\x1b\xff\x14\x10\x1d\xff\x14\x10\x1f\xff\x14\x10\x20\xff\x13\x10\x20\xff\x13\x10\x21\xff\x13\x10\x22\xff\x12\x0f\x23\xff\x12\x10\x23\xff\x13\x0f\x24\xff\x12\x0f\x23\xff\x10\x0e\x20\xff\x10\x0f\x25\xff\x17\x10\x3a\xff\x2a\x14\x6a\xff\x45\x1a\x9c\xff\x64\x1f\xce\xff\x80\x23\xe1\xff\x95\x28\xe3\xff\xcc\x3b\xe8\xff\xe5\x49\xeb\xff\xe2\x4a\xeb\xff\xe2\x4b\xeb\xff\xe2\x4b\xeb\xff\xe2\x4b\xeb\xff\xe3\x4b\xeb\xff\xe8\x4b\xeb\xff\xe5\x48\xeb\xff\xc8\x40\xe8\xff\x87\x33\xe3\xff\x4f\x2a\xde\xff\x41\x29\xdc\xff\x40\x28\xdb\xff\x3d\x27\xdc\xff\x36\x23\xd6\xff\x18\x10\x95\xff\x0d\x08\x71\xff\x0e\x09\x73\xff\x0e\x09\x73\xff\x0d\x09\x74\xff\x24\x12\x99\xff\x5b\x28\xdc\xff\x69\x2c\xe0\xff\x6e\x2d\xe0\xff\x72\x2d\xe0\xff\x78\x2f\xe1\xff\x88\x31\xe3\xff\xc9\x41\xe9\xff\xe6\x4a\xeb\xff\xe2\x4b\xeb\xff\xe4\x4c\xeb\xff\xde\x47\xeb\xff\xdd\x45\xea\xff\xdb\x41\xea\xff\xb4\x32\xe6\xff\x9c\x2a\xe3\xff\x8c\x26\xe1\xff\x87\x25\xe1\xff\x83\x24\xe1\xff\x80\x24\xe3\xff\x7d\x24\xe8\xff\x73\x23\xe2\xff\x61\x1f\xcc\xff\x46\x1a\x9b\xff\x2b\x14\x68\xff\x18\x11\x3a\xff\x11\x0f\x24\xff\x10\x0f\x1f\xff\x13\x10\x23\xff\x14\x10\x23\xff\x13\x10\x22\xff\x14\x10\x21\xff\x14\x10\x20\xff\x14\x10\x20\xff\x14\x10\x1f\xff\x15\x10\x1f\xff\x15\x10\x1e\xff\x15\x10\x1c\xff\x15\x10\x19\xff\x16\x10\x19\xff\x20\x15\x3a\xff\x2c\x1c\x64\xff\x34\x21\x80\xff\x35\x20\x7f\xff\x33\x20\x79\xff\x32\x1f\x74\xff\x32\x1e\x6f\xff\x31\x1e\x6d\xff\x2f\x1d\x68\xff\x2e\x1c\x64\xff\x2d\x1b\x61\xff\x2d\x1b\x5e\xff\x2b\x1a\x5b\xff\x2a\x1a\x58\xff\x28\x1a\x56\xff\x26\x19\x54\xff\x26\x19\x51\xff\x25\x18\x4e\xff\x24\x17\x4c\xff\x23\x17\x4a\xff\x21\x16\x47\xff\x20\x16\x44\xff") then
                    readbuff(buffs.splitsoul, true)
            elseif event:texturecompare(ax, ay + 90, "\x7d\x58\x84\xff\x79\x59\x7d\xff\x75\x5a\x76\xff\x71\x5b\x6f\xff\x6d\x5a\x6a\xff\x6a\x59\x67\xff\x65\x58\x65\xff\x62\x56\x64\xff\x5e\x54\x63\xff\x5a\x52\x62\xff\x59\x51\x63\xff\x59\x50\x66\xff\x5b\x50\x6b\xff\x62\x51\x73\xff\x6b\x51\x7f\xff\x76\x51\x8d\xff\x81\x50\xa0\xff\x8b\x4c\xb0\xff\x8e\x46\xba\xff\x89\x40\xbd\xff\x7f\x39\xbb\xff\x74\x33\xb7\xff\x68\x2d\xb2\xff\x5d\x28\xad\xff\x61\x29\xb4\xff\x70\x2d\xc4\xff\x82\x31\xd5\xff\x90\x34\xe1\xff\x93\x34\xe3\xff\x95\x35\xe8\xff\x97\x36\xed\xff\x9b\x31\xfe\xff\x92\x62\xad\xff\x80\xaf\x28\xff\x82\xab\x32\xff\x8f\xbd\x37\xff\x93\xc3\x38\xff\x94\xc4\x38\xff\x9f\xce\x38\xff\xab\xd9\x38\xff\xaf\xdc\x39\xff\xae\xda\x3a\xff\x9f\xce\x38\xff\x86\xb2\x35\xff\x51\x66\x27\xff\x3d\x48\x21\xff\x44\x54\x23\xff\x72\x94\x2e\xff\x84\xaa\x32\xff\x9f\xc7\x37\xff\xb2\xdb\x39\xff\xbc\xe3\x3a\xff\xc5\xea\x3a\xff\xd4\xf9\x3d\xff\x79\x97\x2c\xff\x3b\x47\x1c\xff\x3d\x47\x1d\xff\x3b\x45\x1c\xff\x3a\x44\x1c\xff\x3a\x44\x1d\xff\x3a\x44\x21\xff\x3a\x44\x21\xff\x3a\x44\x22\xff\x3a\x44\x22\xff\x3a\x44\x22\xff\x3a\x44\x21\xff\x3b\x46\x22\xff\x3d\x48\x22\xff\x3f\x4f\x22\xff\x96\xc1\x32\xff\xbe\xee\x36\xff\xac\xda\x37\xff\xa5\xd1\x3a\xff\xac\xd5\x3e\xff\x89\xb4\x35\xff\x5b\x79\x29\xff\x51\x68\x27\xff\x40\x4d\x23\xff\x3b\x45\x22\xff\x41\x4e\x23\xff\x49\x5b\x25\xff\x4e\x62\x26\xff\x69\x8a\x2c\xff\x70\x94\x2e\xff\x77\x9d\x31\xff\x8b\xb6\x35\xff\xac\xdb\x37\xff\xba\xf3\x2d\xff\xac\x95\x90\xff\x9b\x32\xf6\xff\x9c\x3c\xea\xff\x9c\x3b\xe9\xff\x9b\x3b\xe9\xff\x9b\x3a\xe8\xff\x9a\x3a\xe7\xff\x9a\x39\xe8\xff\x98\x39\xe7\xff\x94\x38\xe3\xff\x8f\x36\xe0\xff\x8a\x34\xdb\xff\x86\x33\xd6\xff\x82\x32\xd2\xff\x7e\x31\xce\xff\x7a\x30\xca\xff\x76\x2f\xc5\xff\x70\x2f\xbe\xff\x69\x2f\xb5\xff\x62\x2f\xab\xff\x5a\x30\x9e\xff\x53\x33\x92\xff\x4d\x35\x86\xff\x4a\x39\x7c\xff\x49\x3d\x76\xff\x49\x3f\x71\xff\x4a\x43\x6d\xff\x4b\x48\x6a\xff\x4e\x4e\x67\xff\x4f\x52\x64\xff\x52\x5a\x62\xff\x56\x62\x60\xff\x5a\x69\x5f\xff\x5e\x70\x5c\xff\x62\x78\x5c\xff\x65\x7d\x5d\xff\x67\x82\x5c\xff\x6a\x86\x5b\xff\x6a\x89\x5b\xff\x6b\x89\x5b\xff") then
                    readbuff(buffs.bloat, false)
            elseif event:texturecompare(ax, ay + 64, "\x1c\x16\x37\xff\x1d\x16\x39\xff\x1d\x16\x3c\xff\x1f\x16\x3e\xff\x20\x17\x40\xff\x22\x18\x43\xff\x23\x18\x46\xff\x23\x18\x49\xff\x25\x19\x4d\xff\x26\x19\x51\xff\x26\x1a\x54\xff\x27\x1a\x58\xff\x29\x1a\x5a\xff\x2b\x1c\x5d\xff\x2c\x1d\x60\xff\x2c\x1d\x63\xff\x2e\x1e\x67\xff\x2f\x1e\x6a\xff\x31\x1f\x6c\xff\x33\x1f\x6f\xff\x35\x20\x73\xff\x37\x20\x77\xff\x39\x22\x7b\xff\x3a\x22\x81\xff\x3b\x22\x86\xff\x3d\x23\x8a\xff\x3e\x24\x8f\xff\x3f\x26\x92\xff\x41\x27\x96\xff\x43\x28\x9a\xff\x44\x29\x9d\xff\x47\x2b\xa1\xff\x49\x2c\xa4\xff\x4b\x2e\xa8\xff\x4d\x2f\xac\xff\x4e\x31\xaf\xff\x50\x31\xb2\xff\x54\x32\xb5\xff\x58\x33\xb9\xff\x5b\x34\xbc\xff\x5d\x35\xc0\xff\x5e\x37\xc3\xff\x5f\x37\xc1\xff\x5c\x35\xb8\xff\x51\x2d\xa0\xff\x3f\x22\x7d\xff\x2b\x17\x54\xff\x26\x0e\x4e\xff\x41\x15\x89\xff\x44\x16\x92\xff\x44\x15\x92\xff\x40\x14\x88\xff\x33\x11\x6a\xff\x24\x0d\x48\xff\x1f\x0c\x41\xff\x27\x0f\x5a\xff\x3c\x16\x94\xff\x49\x1b\xbc\xff\x4e\x1c\xc9\xff\x4d\x1a\xc1\xff\x4d\x19\xba\xff\x4d\x19\xb9\xff\x4b\x17\xb3\xff\x45\x12\xac\xff\x42\x11\xa6\xff\x24\x0b\x59\xff\x2a\x0f\x5d\xff\x87\x2d\xe6\xff\xa8\x35\xfa\xff\x9f\x36\xf3\xff\x99\x38\xf3\xff\x9d\x36\xf3\xff\x9f\x34\xf3\xff\x9f\x34\xf3\xff\x9e\x34\xf3\xff\x9e\x34\xf3\xff\x9a\x34\xf3\xff\x98\x35\xf5\xff\x92\x34\xfb\xff\x4f\x1e\x9d\xff\x1e\x10\x3e\xff\x36\x1f\x6c\xff\x3e\x22\x7b\xff\x52\x2e\xa0\xff\x5f\x35\xbb\xff\x63\x39\xc5\xff\x63\x38\xc5\xff\x61\x37\xc1\xff\x5f\x36\xbd\xff\x5d\x35\xba\xff\x5b\x34\xb8\xff\x58\x33\xb4\xff\x56\x32\xb2\xff\x53\x30\xb0\xff\x51\x2f\xad\xff\x50\x2d\xac\xff\x4c\x2b\xaa\xff\x4a\x2a\xa7\xff\x48\x2a\xa4\xff\x46\x29\xa0\xff\x45\x28\x9c\xff\x42\x27\x99\xff\x40\x26\x95\xff\x3e\x25\x91\xff\x3c\x24\x8d\xff\x3a\x25\x89\xff\x39\x23\x86\xff\x38\x22\x84\xff\x36\x22\x80\xff\x35\x20\x7e\xff\x33\x20\x79\xff\x32\x1f\x74\xff\x32\x1e\x6f\xff\x31\x1e\x6d\xff\x2f\x1d\x68\xff\x2e\x1c\x64\xff\x2d\x1b\x61\xff\x2d\x1b\x5e\xff\x2b\x1a\x5b\xff\x2a\x1a\x58\xff\x28\x1a\x56\xff\x26\x19\x54\xff\x26\x19\x51\xff\x25\x18\x4e\xff\x24\x17\x4c\xff\x23\x17\x4a\xff\x21\x16\x47\xff\x20\x16\x44\xff") then
                    readbuff(buffs.threadsoffate, true)
            elseif event:texturecompare(ax, ay + 64, "\x1b\x16\x36\xff\x1d\x16\x38\xff\x1d\x16\x3a\xff\x1f\x16\x3d\xff\x1f\x17\x40\xff\x21\x17\x42\xff\x21\x17\x42\xff\x1e\x15\x3f\xff\x4b\x92\xa1\xff\x4f\x9a\xa7\xff\x4f\x9a\xa7\xff\x50\x9b\xa8\xff\x50\x9b\xa9\xff\x51\x9b\xaa\xff\x50\x97\xac\xff\x4e\x8b\xae\xff\x36\x1f\xc9\xff\x33\x1b\xcc\xff\x32\x19\xcd\xff\x31\x18\xce\xff\x31\x18\xce\xff\x30\x18\xcb\xff\x2f\x18\xbf\xff\x24\x18\x57\xff\x1e\x19\x35\xff\x1e\x19\x31\xff\x1d\x18\x30\xff\x1d\x18\x2e\xff\x1b\x18\x31\xff\x1b\x16\x35\xff\x1b\x16\x36\xff\x1a\x16\x37\xff\x1a\x15\x35\xff\x1a\x15\x36\xff\x1a\x15\x36\xff\x1c\x17\x37\xff\x1e\x19\x3b\xff\x22\x1c\x3e\xff\x84\x7e\x7d\xff\xad\xa5\x8f\xff\xb3\xab\x94\xff\xb5\xad\x96\xff\xb5\xad\x96\xff\xb3\xaa\x93\xff\x92\x8b\x77\xff\x68\x61\x54\xff\x61\x5c\x51\xff\x5e\x59\x4e\xff\x53\x4f\x4d\xff\x4e\x4b\x4f\xff\x47\x45\x4e\xff\x30\x33\x55\xff\x2f\x35\x56\xff\x2e\x35\x56\xff\x2d\x33\x53\xff\x28\x26\x46\xff\x2a\x25\x41\xff\x37\x31\x45\xff\x63\x5d\x52\xff\x7f\x76\x68\xff\xcb\xc6\xb3\xff\xd0\xcb\xba\xff\xd3\xcd\xbd\xff\xd4\xcf\xbe\xff\xd4\xcf\xbe\xff\xd3\xcd\xbd\xff\xd0\xcb\xba\xff\xcb\xc6\xb3\xff\x7f\x76\x68\xff\x63\x5d\x52\xff\x37\x31\x45\xff\x2a\x25\x41\xff\x28\x26\x46\xff\x2d\x33\x53\xff\x2e\x35\x56\xff\x2f\x35\x56\xff\x30\x33\x55\xff\x47\x45\x4e\xff\x4e\x4b\x4f\xff\x53\x4f\x4d\xff\x5e\x59\x4e\xff\x61\x5c\x51\xff\x68\x61\x54\xff\x92\x8b\x77\xff\xb3\xaa\x93\xff\xb5\xad\x96\xff\xb5\xad\x96\xff\xb3\xab\x94\xff\xad\xa5\x8f\xff\x84\x7e\x7d\xff\x22\x1c\x3e\xff\x1e\x19\x3b\xff\x1c\x17\x37\xff\x1a\x15\x36\xff\x1a\x15\x36\xff\x1a\x15\x35\xff\x1a\x16\x37\xff\x1b\x16\x36\xff\x1b\x16\x35\xff\x1b\x18\x31\xff\x1d\x18\x2e\xff\x1d\x18\x30\xff\x1e\x19\x31\xff\x1e\x19\x35\xff\x24\x18\x57\xff\x2f\x18\xbf\xff\x30\x18\xcb\xff\x31\x18\xce\xff\x31\x18\xce\xff\x32\x19\xcd\xff\x33\x1b\xcc\xff\x36\x1f\xc9\xff\x4e\x8b\xae\xff\x50\x97\xac\xff\x51\x9b\xaa\xff\x50\x9b\xa9\xff\x50\x9b\xa8\xff\x4f\x9a\xa7\xff\x4f\x9a\xa7\xff\x4c\x93\xa2\xff\x23\x17\x4b\xff\x24\x18\x50\xff\x26\x19\x52\xff\x26\x19\x4f\xff\x25\x17\x4c\xff\x23\x17\x4a\xff\x21\x17\x47\xff\x20\x16\x44\xff") then
                    readbuff(buffs.deathmark, false)
            elseif event:texturecompare(ax, ay + 64, "\x3d\x25\x88\xff\x3e\x25\x88\xff\x3e\x25\x88\xff\x3d\x28\x89\xff\x3c\x28\x8b\xff\x3d\x26\x8b\xff\x3d\x28\x8c\xff\x3d\x29\x8e\xff\x3d\x2b\x8f\xff\x3c\x2e\x91\xff\x3c\x32\x95\xff\x3a\x3c\x99\xff\x35\x4e\xa1\xff\x34\x58\xab\xff\x2c\x4c\x8f\xff\x1c\x1e\x3f\xff\x1a\x1f\x3d\xff\x18\x1e\x39\xff\x16\x19\x30\xff\x13\x13\x26\xff\x11\x12\x22\xff\x0f\x0f\x1c\xff\x0d\x0d\x18\xff\x0c\x0d\x15\xff\x0b\x0c\x13\xff\x0a\x0c\x11\xff\x09\x0b\x0f\xff\x09\x0b\x0e\xff\x08\x0b\x0c\xff\x08\x0a\x0c\xff\x07\x0a\x0c\xff\x07\x0a\x0c\xff\x07\x0a\x0b\xff\x07\x0a\x0b\xff\x07\x0a\x0b\xff\x02\x03\x04\xff\x1b\x24\x25\xff\x75\x9a\x9b\xff\xa3\xd5\xd6\xff\xb3\xea\xed\xff\xa6\xd8\xdb\xff\x82\xa9\xaa\xff\x41\x56\x56\xff\x04\x06\x07\xff\x01\x02\x02\xff\x07\x0a\x0a\xff\x07\x0a\x0a\xff\x07\x0a\x0a\xff\x07\x0a\x0a\xff\x04\x05\x05\xff\x00\x00\x00\xff\x1b\x2a\x2b\xff\x44\x69\x69\xff\x5b\x88\x89\xff\x5e\x88\x89\xff\x49\x67\x68\xff\x1a\x25\x25\xff\x00\x00\x00\xff\x06\x09\x09\xff\x07\x0b\x0b\xff\x07\x0c\x0c\xff\x09\x12\x12\xff\x0b\x1c\x1c\xff\x0c\x21\x22\xff\x0d\x29\x2a\xff\x12\x42\x43\xff\x29\x72\x78\xff\x54\xb5\xd1\xff\x5d\xb5\xeb\xff\x43\x55\xbc\xff\x4b\x47\xb6\xff\x4f\x3f\xb3\xff\x51\x3a\xb0\xff\x52\x34\xad\xff\x54\x31\xab\xff\x54\x30\xab\xff\x55\x30\xab\xff\x55\x30\xab\xff\x55\x30\xa9\xff\x55\x30\xa9\xff\x55\x30\xaa\xff\x55\x30\xaa\xff\x55\x31\xaa\xff\x55\x30\xaa\xff\x54\x30\xa9\xff\x54\x30\xa8\xff\x54\x30\xa8\xff\x53\x2f\xa9\xff\x53\x2f\xa9\xff\x51\x30\xa6\xff\x51\x2f\xa6\xff\x51\x2f\xa6\xff\x52\x30\xa6\xff\x52\x30\xa6\xff\x51\x2f\xa4\xff\x51\x2f\xa4\xff\x51\x2f\xa4\xff\x50\x34\xa6\xff\x51\x32\xa7\xff\x51\x2e\xa6\xff\x51\x2f\xa6\xff\x50\x2f\xa5\xff\x4f\x2f\xa4\xff\x4f\x2f\xa4\xff\x4d\x32\xa5\xff\x4b\x38\xa7\xff\x47\x40\xab\xff\x45\x46\xac\xff\x41\x4d\xaf\xff\x38\x63\xb8\xff\x2d\x7f\xc3\xff\x28\x8c\xc9\xff\x26\x8f\xca\xff\x26\x8c\xc7\xff\x26\x85\xc1\xff\x28\x8d\xcb\xff\x16\x3f\x5b\xff\x09\x04\x06\xff\x0b\x0c\x13\xff\x0c\x0c\x16\xff\x0e\x0c\x18\xff\x14\x24\x33\xff\x1c\x44\x57\xff\x21\x53\x69\xff\x25\x5c\x77\xff\x27\x66\x85\xff\x2c\x70\x95\xff\x2e\x93\xbb\xff") then
                    readbuff(buffs.skeletonwarrior, true)
            elseif event:texturecompare(ax, ay + 64, "\x2b\xd3\xdb\xff\x2d\xd5\xdc\xff\x2c\xd9\xdd\xff\x29\xe4\xde\xff\x33\xb3\xd4\xff\x50\x21\xb4\xff\x51\x1f\xb4\xff\x51\x21\xb4\xff\x51\x22\xb5\xff\x51\x22\xb5\xff\x52\x22\xb6\xff\x56\x21\xbd\xff\x36\x2a\x89\xff\x13\x35\x40\xff\x1a\x33\x40\xff\x1a\x36\x44\xff\x1a\x37\x46\xff\x21\x58\x71\xff\x26\x6b\x8b\xff\x26\x6c\x8d\xff\x1e\x7a\x9f\xff\x1c\x7e\xa6\xff\x1d\x7e\xa7\xff\x1f\x7d\xa7\xff\x1c\x7e\xa7\xff\x1c\x7f\xa7\xff\x1d\x80\xa8\xff\x1d\x80\xa8\xff\x1f\x81\xa9\xff\x1f\x81\xa9\xff\x1f\x81\xa9\xff\x1f\x81\xa9\xff\x1f\x81\xa8\xff\x1e\x81\xa8\xff\x1e\x81\xa8\xff\x1e\x80\xa7\xff\x1e\x80\xa6\xff\x1f\x80\xa6\xff\x1f\x7f\xa6\xff\x1f\x82\xa6\xff\x1f\x83\xa6\xff\x24\x7c\x98\xff\x27\x78\x8d\xff\x27\x7a\x8d\xff\x26\x79\x8d\xff\x26\x7a\x8f\xff\x26\x77\x90\xff\x25\x7f\x9e\xff\x20\xa0\xc6\xff\x20\xa6\xcb\xff\x23\xa8\xca\xff\x25\xaa\xcb\xff\x26\xa9\xcb\xff\x26\xa8\xcb\xff\x26\xa8\xce\xff\x23\x95\xbc\xff\x1a\x70\x96\xff\x16\x61\x84\xff\x17\x60\x81\xff\x17\x62\x82\xff\x17\x69\x85\xff\x17\x6d\x87\xff\x17\x6d\x86\xff\x17\x6b\x87\xff\x17\x6a\x87\xff\x17\x6c\x87\xff\x17\x6b\x8a\xff\x17\x6b\x8a\xff\x17\x6b\x8a\xff\x18\x6a\x8a\xff\x18\x6a\x8a\xff\x18\x6a\x8a\xff\x18\x6a\x8a\xff\x17\x6a\x8a\xff\x17\x6a\x8a\xff\x17\x6a\x8a\xff\x17\x69\x8a\xff\x18\x69\x8a\xff\x1a\x66\x8b\xff\x19\x68\x8b\xff\x19\x6a\x89\xff\x1a\x6a\x88\xff\x1a\x6b\x88\xff\x1e\x72\x93\xff\x17\x49\x65\xff\x0f\x29\x41\xff\x11\x37\x4d\xff\x1a\x65\x83\xff\x1f\x7e\x9e\xff\x26\x98\xa5\xff\x27\xa0\xa9\xff\x27\xa4\xaa\xff\x28\xa2\xab\xff\x28\xa2\xab\xff\x28\xa3\xab\xff\x27\xa4\xaa\xff\x26\x9f\xa9\xff\x20\x84\xa1\xff\x1d\x7b\x9d\xff\x1d\x78\x9d\xff\x17\x7d\x9b\xff\x32\x4c\xa3\xff\x4d\x1a\xab\xff\x49\x1e\xa5\xff\x45\x1b\x9d\xff\x42\x1a\x96\xff\x3f\x18\x8f\xff\x3c\x17\x8a\xff\x39\x16\x85\xff\x38\x14\x81\xff\x36\x14\x7f\xff\x35\x13\x7c\xff\x34\x13\x7b\xff\x34\x13\x79\xff\x33\x13\x78\xff\x33\x12\x78\xff\x33\x12\x77\xff\x33\x12\x77\xff\x32\x12\x76\xff\x32\x12\x75\xff\x32\x12\x74\xff\x31\x12\x74\xff\x31\x12\x73\xff\x31\x11\x72\xff\x30\x11\x72\xff\x30\x11\x71\xff\x30\x11\x70\xff\x30\x11\x6f\xff") then
                    readbuff(buffs.vengefulghost, true)
            elseif event:texturecompare(ax, ay + 64, "\x3d\x25\x8a\xff\x3d\x25\x8a\xff\x3e\x25\x8a\xff\x3e\x25\x8c\xff\x3e\x28\x8c\xff\x3e\x2c\x8e\xff\x40\x34\x90\xff\x41\x41\x90\xff\x42\x51\x93\xff\x43\x64\x96\xff\x44\x7d\x99\xff\x45\x9a\x9d\xff\x45\xac\x9e\xff\x38\x88\x7e\xff\x22\x54\x4f\xff\x11\x2b\x29\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x29\x27\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x2a\x27\xff\x12\x29\x27\xff\x0f\x25\x23\xff\x0e\x21\x20\xff\x0d\x21\x20\xff\x0d\x20\x1f\xff\x0c\x20\x1f\xff\x0c\x20\x1f\xff\x0c\x1f\x1f\xff\x0c\x20\x1f\xff\x0c\x20\x1f\xff\x0d\x20\x20\xff\x0d\x20\x1f\xff\x0c\x1f\x1e\xff\x0c\x1e\x1e\xff\x0d\x20\x1f\xff\x10\x28\x26\xff\x12\x2e\x2b\xff\x0e\x3a\x39\xff\x0c\x40\x3f\xff\x0e\x3d\x3c\xff\x0f\x3b\x39\xff\x0f\x38\x36\xff\x0f\x2b\x29\xff\x10\x2b\x2a\xff\x28\x7d\x7b\xff\x3e\xc3\xa1\xff\x44\xec\x8a\xff\x42\xf2\x79\xff\x41\xf0\x77\xff\x44\xde\xa3\xff\x29\x79\x7a\xff\x18\x41\x40\xff\x48\xa7\x9f\xff\x4b\xad\xa5\xff\x1d\x45\x41\xff\x0c\x23\x21\xff\x2e\x6e\x68\xff\x50\xaf\xaf\xff\x4e\x96\xa8\xff\x4f\x82\xa9\xff\x51\x70\xaa\xff\x52\x5f\xaa\xff\x53\x50\xab\xff\x54\x44\xab\xff\x53\x3c\xab\xff\x53\x36\xab\xff\x54\x32\xab\xff\x55\x31\xab\xff\x55\x30\xab\xff\x55\x30\xa9\xff\x55\x30\xa9\xff\x55\x30\xaa\xff\x55\x30\xaa\xff\x55\x31\xaa\xff\x55\x30\xaa\xff\x54\x30\xa9\xff\x54\x30\xa8\xff\x54\x30\xa8\xff\x53\x2f\xa9\xff\x53\x2f\xa9\xff\x51\x30\xa6\xff\x51\x2f\xa6\xff\x51\x30\xa6\xff\x52\x34\xa6\xff\x51\x3c\xa6\xff\x50\x48\xa4\xff\x4f\x59\xa4\xff\x4e\x6d\xa4\xff\x4c\x86\xa4\xff\x4b\xa4\xa6\xff\x4a\xb0\xa6\xff\x24\x57\x52\xff\x10\x27\x22\xff\x11\x2d\x27\xff\x0f\x23\x21\xff\x0f\x22\x20\xff\x0f\x23\x20\xff\x0f\x25\x22\xff\x0f\x25\x22\xff\x10\x24\x21\xff\x10\x23\x21\xff\x10\x22\x20\xff\x0f\x21\x1f\xff\x12\x31\x29\xff\x14\x38\x2e\xff\x3a\x8e\x83\xff\x49\xaf\xa5\xff\x47\x91\x9f\xff\x47\x75\x9d\xff\x47\x5e\x9b\xff\x47\x4b\x99\xff\x47\x3c\x98\xff\x46\x32\x97\xff\x46\x2c\x95\xff\x46\x2a\x95\xff\x46\x29\x95\xff\x46\x29\x94\xff\x46\x29\x94\xff\x45\x29\x93\xff\x46\x29\x94\xff\x45\x28\x94\xff\x45\x28\x93\xff\x44\x27\x92\xff") then
                    readbuff(buffs.putridzombie, true)
            elseif event:texturecompare(ax, ay + 64, "\x3e\x27\x8a\xff\x3e\x27\x8c\xff\x40\x27\x8d\xff\x42\x28\x8f\xff\x42\x28\x90\xff\x43\x28\x91\xff\x44\x28\x93\xff\x64\x69\x91\xff\x72\x88\x96\xff\x71\x87\x95\xff\x71\x87\x95\xff\x70\x86\x95\xff\x71\x87\x95\xff\x71\x87\x95\xff\x70\x86\x94\xff\x6f\x83\x93\xff\x6e\x82\x92\xff\x6d\x82\x91\xff\x6c\x81\x90\xff\x6c\x81\x90\xff\x6b\x80\x8f\xff\x6a\x80\x8e\xff\x6b\x80\x8f\xff\x6a\x7f\x8e\xff\x69\x7d\x8c\xff\x67\x7c\x8b\xff\x68\x7c\x8b\xff\x67\x7a\x8a\xff\x66\x7a\x8a\xff\x65\x76\x87\xff\x56\x63\x73\xff\x2f\x35\x3f\xff\x26\x2c\x35\xff\x27\x22\x2a\xff\x29\x5f\x78\xff\x39\x8e\xd3\xff\x37\x9d\xda\xff\x36\xa5\xdd\xff\x38\xa5\xdd\xff\x3c\xa1\xdc\xff\x3f\x9e\xdb\xff\x42\x9d\xdb\xff\x44\x9b\xda\xff\x46\x9a\xda\xff\x4a\x99\xda\xff\x4d\x98\xda\xff\x50\x96\xd9\xff\x53\x95\xd9\xff\x56\x94\xd9\xff\x59\x91\xd9\xff\x5c\x8e\xd9\xff\x5d\x8c\xd9\xff\x5f\x8b\xd9\xff\x61\x88\xd8\xff\x62\x88\xd8\xff\x63\x87\xd8\xff\x63\x87\xd9\xff\x63\x87\xd9\xff\x64\x87\xd9\xff\x62\x88\xd9\xff\x60\x89\xda\xff\x5f\x8c\xda\xff\x5d\x8f\xdb\xff\x5a\x92\xdb\xff\x57\x95\xdb\xff\x52\x94\xda\xff\x4c\x93\xda\xff\x5f\x67\xc6\xff\x75\x65\xbe\xff\x8b\x88\xbe\xff\x9a\xab\xba\xff\x98\xaf\xb9\xff\x9b\xae\xba\xff\x9a\xae\xb9\xff\x9b\xb1\xbb\xff\xa3\xb8\xc1\xff\xae\xc0\xc8\xff\xb5\xc8\xcf\xff\xb8\xc9\xcf\xff\xb7\xc9\xce\xff\xb4\xc4\xc9\xff\xa8\xb6\xbe\xff\x99\xa4\xb0\xff\x8b\x94\xa1\xff\x85\x8e\x9c\xff\x83\x8b\x9c\xff\x80\x88\x9a\xff\x7e\x86\x97\xff\x7c\x84\x95\xff\x7a\x83\x93\xff\x79\x83\x93\xff\x77\x80\x90\xff\x73\x7a\x8c\xff\x6d\x74\x88\xff\x61\x68\x7f\xff\x48\x50\x61\xff\x31\x38\x44\xff\x33\x3a\x46\xff\x49\x51\x60\xff\x5a\x61\x76\xff\x5d\x65\x7c\xff\x5e\x66\x7d\xff\x5d\x65\x7c\xff\x5c\x64\x7b\xff\x5a\x64\x7b\xff\x59\x63\x79\xff\x5a\x62\x78\xff\x59\x61\x77\xff\x57\x5f\x75\xff\x56\x5d\x73\xff\x52\x59\x6d\xff\x45\x4d\x5d\xff\x29\x30\x3c\xff\x25\x2d\x37\xff\x45\x4d\x5c\xff\x59\x61\x78\xff\x5d\x66\x7c\xff\x64\x6e\x84\xff\x79\x73\xa1\xff\x43\x29\x8f\xff\x41\x29\x8d\xff\x40\x28\x8c\xff\x3f\x28\x8b\xff\x3f\x27\x8a\xff\x3e\x26\x89\xff\x3e\x26\x87\xff\x3d\x26\x86\xff\x3d\x25\x86\xff") then
                    readbuff(buffs.phantomguardian, true)
            end
        end
        if aw == 76 then
          if event:texturecompare(ax, ay + 35, "\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x04\x00\x00\x01\x0f\x00\x00\x01\x28\x33\x44\x4f\xa1\x11\x26\x31\xff\x13\x29\x33\xff\x1a\x2b\x34\xff\x12\x23\x2a\xff\x12\x23\x2a\xff\x12\x23\x2a\xff\x12\x1d\x23\xff\x12\x23\x2a\xff\x12\x1d\x23\xff\x2b\x43\x4f\xff\x1a\x32\x3d\xff\x13\x29\x33\xff\x13\x29\x33\xff\x13\x29\x33\xff\x13\x29\x33\xff\x12\x23\x2a\xff\x2b\x43\x4f\xff\x1a\x32\x3d\xff\x06\x11\x15\xff\x06\x11\x15\xff\x12\x1d\x23\xff\x1a\x32\x3d\xff\x3c\x5b\x69\xff\x43\x65\x72\xff\x1a\x32\x3d\xff\x1a\x32\x3d\xff\x13\x29\x33\xff\x13\x29\x33\xff\x1a\x2b\x34\xff\x12\x23\x2a\xff\x13\x29\x33\xff\x1a\x32\x3d\xff\x1a\x2b\x34\xff\x23\x33\x3c\xff\x43\x65\x72\xff\x23\x33\x3c\xff\x04\x0d\x11\xff\x06\x11\x15\xff\x12\x23\x2a\xff\x1a\x2b\x34\xff\x0c\x1b\x22\xff\x0c\x21\x2b\xff\x0d\x25\x31\xff\x29\x4c\x57\xff\x3a\x3f\x40\xff\x3a\x1a\x17\xff\x26\x10\x0e\xff\x3a\x1a\x17\xff\x4b\x1f\x1c\xff\x53\x21\x1f\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x3a\x1a\x17\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x3a\x1a\x17\xff\x4b\x1f\x1c\xff\x43\x1c\x19\xff\x43\x1c\x19\xff\x4b\x1f\x1c\xff\x4b\x1f\x1c\xff\x4b\x1f\x1c\xff") then
            readuielement(elements.central, true)
          end
        end
      elseif aw == 140 then
        -- checks for bank interface assets
        if event:texturecompare(ax, ay + 16, "\x00\x00\x01\xff\x09\x11\x15\xff\x02\x0d\x14\xff\x05\x1c\x29\xff\x19\x33\x42\xff\x25\x37\x42\xff\x19\x33\x42\xff\x1c\x31\x3b\xff\x15\x28\x32\xff\x02\x0d\x14\xff\x00\x00\x01\xff\x00\x00\x01\xff\x02\x0d\x14\xff\x02\x0d\x14\xff\x02\x0d\x14\xff\x02\x0d\x14\xff\x03\x09\x0d\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x02\x0d\x14\xff\x03\x09\x0d\xff\x01\x05\x0a\xff\x09\x11\x15\xff\x00\x00\x01\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x02\x0d\x14\xff\x09\x11\x15\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x0a\x1d\x29\xff\x0c\x24\x32\xff\x13\x26\x31\xff\x0c\x20\x2a\xff\x05\x12\x1a\xff\x0a\x1d\x29\xff\x02\x0d\x14\xff\x03\x09\x0d\xff\x02\x0d\x14\xff\x05\x19\x24\xff\x04\x15\x21\xff\x0a\x1d\x29\xff\x05\x1c\x29\xff\x0c\x20\x2a\xff\x05\x19\x24\xff\x05\x12\x1a\xff\x02\x0d\x14\xff\x00\x00\x01\xff\x00\x00\x01\xff\x02\x0d\x14\xff\x05\x12\x1a\xff\x02\x0d\x14\xff\x0d\x1a\x21\xff\x02\x0d\x19\xff\x0d\x1a\x21\xff\x0c\x20\x2a\xff\x05\x1c\x29\xff\x0d\x1a\x21\xff\x03\x09\x0d\xff\x01\x05\x0a\xff\x00\x00\x01\xff\x04\x15\x21\xff\x0c\x24\x32\xff\x05\x12\x1a\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x02\x0d\x14\xff\x0a\x1d\x29\xff\x0c\x20\x2a\xff\x05\x12\x1a\xff\x0d\x1a\x21\xff\x0c\x20\x2a\xff\x04\x15\x21\xff\x13\x23\x2b\xff\x14\x2c\x3a\xff\x05\x12\x1a\xff\x03\x09\x0d\xff\x03\x09\x0d\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x03\x09\x0d\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x00\x00\x01\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x00\x00\x01\xff\x02\x0d\x14\xff\x14\x2c\x3a\xff\x0d\x1a\x21\xff\x00\x00\x01\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x00\x00\x01\xff\x00\x00\x01\xff\x05\x19\x24\xff\x05\x19\x24\xff\x0c\x20\x2a\xff\x04\x15\x21\xff\x0d\x1a\x21\xff\x04\x15\x21\xff\x04\x15\x21\xff\x02\x0d\x14\xff\x02\x0d\x14\xff\x05\x1c\x29\xff\x0c\x20\x2a\xff\x19\x33\x42\xff\x19\x2e\x3a\xff\x02\x0d\x14\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x04\x10\x16\xff\x02\x0d\x14\xff\x05\x12\x1a\xff\x04\x15\x21\xff\x04\x15\x21\xff\x05\x19\x24\xff\x0c\x20\x2a\xff\x0c\x20\x2a\xff\x04\x15\x21\xff\x05\x12\x1a\xff\x00\x00\x01\xff\x01\x05\x0a\xff\x03\x09\x0d\xff\x05\x12\x1a\xff\x02\x0d\x19\xff\x04\x15\x21\xff\x0c\x20\x2a\xff\x04\x15\x21\xff\x0a\x1d\x29\xff\x05\x19\x24\xff") then
          readuielement(elements.bank, true)
        end
      elseif aw == 28 then
        if event:texturecompare(ax, ay + 16, "\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x19\x20\x23\xff\x3f\x51\x5d\xff\x1b\x2b\x34\xff\x0c\x1a\x23\xff\x04\x12\x1b\xff\x13\x22\x2a\xff\x54\x66\x71\xff\x23\x3a\x46\xff\x11\x1d\x24\xff\x02\x0d\x14\xff\x13\x22\x2a\xff\x0c\x1a\x23\xff\x02\x15\x21\xff\x02\x15\x21\xff\x2b\x3a\x44\xff\x54\x66\x71\xff\x51\x24\x23\xff\x3b\x13\x12\xff\x42\x14\x13\xff\x44\x1a\x16\xff\x42\x14\x13\xff\x3b\x13\x12\xff\x3b\x13\x12\xff\x42\x14\x13\xff") then
            readuielement(elements.lobby, true)
        end
      end
    end
  end
end)

bolt.onrender3d(function (event)
  if not (checkframe or any3dobjectexists) then return end
  local f = render3dlookup[event:vertexcount()]
  if f ~= nil then
    local model = f(event)
    if model and model.dohighlight then
      any3dobjectfound = true
      if (bolt.time() % 600000) <= 480000 then
        local m = model.center
        if model.anim then
          m = m:transform(event:vertexanimation(1))
        end
        drawbox(m:transform(event:modelmatrix()), event:viewmatrix(), event:projectionmatrix(), model.boxsize, model.boxthickness)
      end
      if checkframe then
        model.foundoncheckframe = true
      end
    end
  end
end)

bolt.onrendericon(function (event)
  if not checkframe then return end
  local modelcount = event:modelcount()
  local f = nil
  if modelcount == 1 then
    f = rendericonlookup1[event:modelvertexcount(1)]
  elseif modelcount == 2 then
    f = rendericonlookup2[event:modelvertexcount(1)]
  end
  if f ~= nil then
    nextrender2dbuff, nextrender2ddebuff = f(event)
    nextrender2dpxleft, nextrender2dpxtop, _, _ = event:xywh()
  end
end)

local startcheckframe = function (t)
  for _, buff in pairs(buffs) do
    buff.foundoncheckframe = false
  end
  for _, model in pairs(models) do
    model.foundoncheckframe = false
  end
  for _, element in pairs(elements) do
    element.foundoncheckframe = false
  end
end

local endcheckframe = function (t)
  for _, buff in pairs(buffs) do
    if not buff.foundoncheckframe then
      buff.active = false
    end
  end
  for _, element in pairs(elements) do
    if not element.foundoncheckframe then
        element.active = false
    end
  end
end

bolt.onswapbuffers (function (event)
--   bolt.onrendergameview(function (event)
  local t = bolt.time()
  if checkframe then
    endcheckframe(t)
    checkframe = false
  end

  if t > checktime + checkinterval then
    checkframe = true
    checktime = checktime + checkinterval
    if checktime < t then
      checktime = t
    end
    startcheckframe(t)
end
  if elements.bank.active or elements.central.active or elements.lobby.active then
    return
  else
  --  if models.temporalanomaly then
  --    print("TA PROCCED???????")
  --  end

  -- if hidegauge then
  --   return
  -- else
    if buffs.livingdeath.active or buffs.sorrow.active then
      cbstyle = "necromancy"
    elseif buffs.sunshine.active or buffs.torment.active then
      cbstyle = "magic"
    end


    gassetd = "assets.gauge-ui."
    ganecro = gassetd .. "necromancy."
    gaincan = ganecro .. "incantations."
    gamagic = gassetd .. "magic."
    gaspell = gamagic .. "active-spell."

    if cbstyle == "none" then
      return
    elseif cbstyle == "necromancy" then
      -- setup
      local lineprogram = bolt.createshaderprogram(
        bolt.createvertexshader(
      "layout (location = 0) in vec2 vXY;".. -- points from -1 to 1, as needed by opengl to draw a rectangle
      "out vec2 xy;".. -- calculated pixel coordinate of the vertex based on vXY and target_wh
      "layout (location = 0) uniform vec2 target_wh;".. -- pixel width and height of the target area
      "void main() {"..
        "xy = vec2(((vXY.x + 1.0) / 2.0) * target_wh.x, ((vXY.y + 1.0) / 2.0) * target_wh.y);"..
        "gl_Position = vec4(vXY, 0.0, 1.0);"..
      "}"
        ),
        bolt.createfragmentshader(
      "in vec2 xy;".. -- pixel coordinate of this fragment
      "out highp vec4 col;".. -- fragment colour output
      "layout (location = 1) uniform vec4 line_points;".. -- the pixel coordinates of the two points of the line we want to draw
      "layout (location = 2) uniform vec4 line_colour;".. -- the RGBA colour of the central part of the line
      "layout (location = 3) uniform float line_thickness;".. --thickness of the line in pixels
      "void main() {"..
        "vec2 p1 = line_points.st;"..
        "vec2 p2 = line_points.pq;"..
        "vec2 perpendicular = vec2(line_points.t - line_points.q, line_points.p - line_points.s);"..
        "float dist_line = abs(dot(normalize(perpendicular), p2 - xy));"..
        "float dist_p1 = length(p1 - xy);"..
        "float dist_p2 = length(p2 - xy);"..
        "bool nearestp1 = dot(xy - p1, p2 - p1) < 0.0;"..
        "bool nearestp2 = dot(xy - p2, p1 - p2) < 0.0;"..
        "float dist = mix(mix(dist_p2, dist_p1, nearestp1), dist_line, !nearestp1 && !nearestp2);"..
        "col = vec4(line_colour.stp, line_colour.q * (1.0 - smoothstep(line_thickness, line_thickness + 0.5, dist)));"..
      "}"
        )
      )
      lineprogram:setattribute(0, 1, true, false, 2, 0, 2)
      local linebuffer = bolt.createshaderbuffer("\xFF\xFF\x01\xFF\x01\x01\xFF\xFF\x01\x01\xFF\x01")
      linesurfacesize = 100
      local linesurface = bolt.createsurface(linesurfacesize, linesurfacesize)
      lineprogram:setuniform2f(0, linesurfacesize, linesurfacesize)
      lineprogram:setuniform4f(2, 224/255, 47/255, 221/255, 1) -- line colour (rgba, 0.0 - 1.0)
      lineprogram:setuniform1f(3, 2) -- line thickness (px)

      -- function to redraw the hexagon to the surface
      local updatelinesurface = function (elapsed, maxtime, program, surface, surfacesize)
        linesurface:clear()
        if elapsed > maxtime then return false end
        local surfaceradius = (surfacesize - 0) / 2
        for i = 1, 6 do
          local hexradius = (surfacesize - 5) / 2
          local angle = (90 + ((i - 1) * 60)) * math.pi / 180.0
          local nextangle = (90 + (i * 60)) * math.pi / 180.0
          local x = math.cos(angle) * hexradius + surfaceradius
          local y = surfacesize - (math.sin(angle) * hexradius + surfaceradius)
          local nextx = math.cos(nextangle) * hexradius + surfaceradius
          local nexty = surfacesize - (math.sin(nextangle) * hexradius + surfaceradius)
          local timestart = maxtime * (6 - i) / 6
          local lastline = elapsed >= timestart
          if lastline then
            local length = (1.0 - ((elapsed - timestart) / (maxtime / 6))) * hexradius
            local relangle = math.atan2(nexty - y, nextx - x)
            nextx = math.cos(relangle) * length + x
            nexty = math.sin(relangle) * length + y
          end
          lineprogram:setuniform4f(1, x, y, nextx, nexty)
          lineprogram:drawtosurface(surface, linebuffer, 6)
          if lastline then return true end
        end
        return true
      end
      if buffs.necrosis.active then
        necrosisvalue = tostring(buffs.necrosis.number)
      else
        necrosisvalue = "0"
      end
      if buffs.skeletonwarrior.active and buffs.vengefulghost.active and buffs.putridzombie.active and buffs.phantomguardian.active then
        conjuresactive = "active"
      else
        conjuresactive = "inactive"
      end
      if buffs.residualsouls.active then
        if buffs.residualsouls.parensnumber then
          rsvalue = tostring(buffs.residualsouls.parensnumber)
        else
          rsvalue = tostring(buffs.residualsouls.number)
        end
      else
        rsvalue = "0"
      end
      if buffs.livingdeath.active then
        ldactive = "active"
        ldmax = 30
        ldval = buffs.livingdeath.number
        ldelp = ldel
        ldel = ldmax - ldval
        if ldel == ldelp then
          ldel = ldelp - 0.1
        end
        ldperc = math.min(1, math.max(0, math.min(1, math.floor(((ldmax - (ldmax - ldval)) / ldmax) * 100 + 0.5) / 100)))
        print(tostring(ldperc))
      else
        ldactive = "inactive"
        ldmax = 30
        ldel = 35
        ldperc = 0
      end
      if buffs.threadsoffate.active then
        threadsactive = "active"
        local max = 6.6
        local val = buffs.threadsoffate.number
        tofperc = math.min(150, 150 * math.max(0, math.min(1, math.floor(((max - (max - val)) / max) * 100 + 0.5) / 100)))
      else
        threadsactive = "inactive"
        tofperc = 0
      end
      if buffs.splitsoul.active then
        ssactive = "active"
        local max = 20.4
        local val = buffs.splitsoul.number
        ssperc = math.min(150, 150 * math.max(0, math.min(1, math.floor(((max - (max - val)) / max) * 100 + 0.5) / 100)))
      else
        ssactive = "inactive"
        ssperc = 0
      end
      if buffs.deathmark.active then
        dmactive = "active"
      else
        dmactive = "inactive"
      end
      if buffs.darkness.active then
        dnessactive = "active"
      else
        dnessactive = "inactive"
      end
      if buffs.bloat.active then
        bloatprev = true
      else
        bloatperc = 0
        bloattimer = 0
      end
      local year, month, day, hour, minute, second = bolt.datetime()
      local unt = (month * 30 * 24 * 3600) + (day * 24 * 3600) + (hour * 3600) + (minute * 60) + second
      btt = 22.2
      if bloattimer <= 0 then
        if buffs.bloat.active then
          bloattimer = btt
          bloatstart = unt
          bloatperc = 100
        else
          bloatperc = 0
        end
      else
        elapsed_time = unt - bloatstart
        bloattimer = btt - elapsed_time
        local function roundToHundredth(value)
          return math.floor(value * 100 + 0.5) / 100
        end
        local function clamp(value)
          return math.max(0, math.min(1, value))
        end
        bloatperc = clamp(roundToHundredth((btt - elapsed_time) / btt))
      end
      bloatbarsize = math.min(150, 150 * bloatperc)


      local basegauge, width, height = bolt.createsurfacefrompng(ganecro .. intstyle .. "-base")
      local necrosis, width, height = bolt.createsurfacefrompng(ganecro .. ".necrosis." .. necrosisvalue)
      local conjures, width, height = bolt.createsurfacefrompng(ganecro .. "conjure-undead-army." .. conjuresactive)
      local souls, width, height = bolt.createsurfacefrompng(ganecro .. "residual-souls." .. rsvalue)
      local ldi, width, height = bolt.createsurfacefrompng(ganecro .. "living-death.inactive")
      local ld, width, height = bolt.createsurfacefrompng(ganecro .. "living-death." .. ldactive)
      local ldbar, width, height = bolt.createsurfacefrompng(ganecro .. "living-death.ldbar")
      local bloatbar, width, height = bolt.createsurfacefrompng(ganecro .. "bloat.bloatbar")
      local bloatbg, width, height = bolt.createsurfacefrompng(ganecro .. "bloat.bloatbg")
      local bloatframe, width, height = bolt.createsurfacefrompng(ganecro .. "bloat.bloatframe")
      local ticker, width, height = bolt.createsurfacefrompng("assets.interface.modern.ticker")
      local threads, width, height = bolt.createsurfacefrompng(gaincan .. "threads-of-fate." .. threadsactive)
      local tofbar, width, height = bolt.createsurfacefrompng(gaincan .. "threads-of-fate.tofbar")
      local ss, width, height = bolt.createsurfacefrompng(gaincan .. "split-soul." .. ssactive)
      local ssbar, width, height = bolt.createsurfacefrompng(gaincan .. "split-soul.ssbar")
      local dm, width, height = bolt.createsurfacefrompng(gaincan .. "invoke-death." .. dmactive)
      local dness, width, height = bolt.createsurfacefrompng(gaincan .. "darkness." .. dnessactive)

      
      basegauge:drawtoscreen(0, 0, 260, 44, gx, gy, gw, gh)
      conjures:drawtoscreen(0, 0, 100, 100, gx, gy - (3 * scale), 50 * scale, 50 * scale)

      dm:drawtoscreen(0, 0, 24, 21, gm + ( 25 * scale), gy - (10 * scale), 24 * scale, 21 * scale)
      dness:drawtoscreen(0, 0, 24, 21, gm + (50 * scale), gy - (10 * scale), 24 * scale, 21 * scale)
      ss:drawtoscreen(0, 0, 120, 120, gm - (25 * scale), gy - ( 25 * scale / 2), 25 * scale, 25 * scale)
      threads:drawtoscreen(0, 0, 24, 21, gm - (50 * scale), gy - (10 * scale), 24 * scale, 21 * scale)
      --tofbar:drawtoscreen(0, 0, 1, 6, gx + math.floor(gw * 0.2), gy + (28 * scale), math.floor(tofperc * scale), 2 * scale)

      ssbar:drawtoscreen(0, 0, 150, 6, gx + math.floor(gw * 0.2), gy + (25 * scale), math.floor(ssperc * scale), 2 * scale)

      --if buffs.livingdeath.active then
        --ldbg:drawtoscreen(0, 0, 100, 100, gx + math.floor(gw * 0.85), gy - (3 * scale), 50 * scale, 50* scale)
      --end

      --do this every frame before you need to use the hexagon
      updatelinesurface(ldel, ldmax, lineprogram, ld, 100)

      ld:drawtoscreen(0, 0, 100, 100, gx + math.floor(gw * 0.85), gy - (3 * scale), 50 * scale, 50* scale)

      --ldbar:drawtoscreen(0, 0, 1, 6, gx + math.floor(gw * 0.2), gy + (22 * scale), math.floor((150 * ldperc) * scale), 2 * scale)

      souls:drawtoscreen(0, 0, 160, 32, gx + math.floor(gw * 0.2) - (2 * scale), gb - ( 10 * scale), 16 * scale * 5, 16 * scale)

      bloatbg:drawtoscreen(0, 0, 154, 12, gx + math.floor(gw * 0.2) - (2 * scale), gy + (13 * scale) - (2 * scale), 154 * scale, 12 * scale)
      bloatbar:drawtoscreen(0, 0, 1, 6, gx + math.floor(gw * 0.2), gy + (14 * scale), math.floor(bloatbarsize * scale), 6 * scale)
      bloatframe:drawtoscreen(0, 0, 154, 12, gx + math.floor(gw * 0.2) - (2 * scale), gy + (13 * scale) - (2 * scale), 154 * scale, 12 * scale)
      if buffs.bloat.active then
        ticker:drawtoscreen(0, 0, 9, 14, gx + math.floor(gw * 0.2) + math.floor(bloatbarsize * scale) - ( 8 * scale), gy + (13 * scale) - (2 * scale), 9 * scale, 10 * scale)
      end


      necrosis:drawtoscreen(0, 0, 64, 32, gx + math.floor(gw * 0.2) + (20 * scale * 5) + (16 * scale), gb - ( 16 * scale), 24 * scale * 2, 24 * scale)

    elseif cbstyle == "magic" then

      local gevalue = "0"
      local btvalue = "0"

      -- setup
      local lineprogram = bolt.createshaderprogram(
        bolt.createvertexshader(
      "layout (location = 0) in vec2 vXY;".. -- points from -1 to 1, as needed by opengl to draw a rectangle
      "out vec2 xy;".. -- calculated pixel coordinate of the vertex based on vXY and target_wh
      "layout (location = 0) uniform vec2 target_wh;".. -- pixel width and height of the target area
      "void main() {"..
        "xy = vec2(((vXY.x + 1.0) / 2.0) * target_wh.x, ((vXY.y + 1.0) / 2.0) * target_wh.y);"..
        "gl_Position = vec4(vXY, 0.0, 1.0);"..
      "}"
        ),
        bolt.createfragmentshader(
      "in vec2 xy;".. -- pixel coordinate of this fragment
      "out highp vec4 col;".. -- fragment colour output
      "layout (location = 1) uniform vec4 line_points;".. -- the pixel coordinates of the two points of the line we want to draw
      "layout (location = 2) uniform vec4 line_colour;".. -- the RGBA colour of the central part of the line
      "layout (location = 3) uniform float line_thickness;".. --thickness of the line in pixels
      "void main() {"..
        "vec2 p1 = line_points.st;"..
        "vec2 p2 = line_points.pq;"..
        "vec2 perpendicular = vec2(line_points.t - line_points.q, line_points.p - line_points.s);"..
        "float dist_line = abs(dot(normalize(perpendicular), p2 - xy));"..
        "float dist_p1 = length(p1 - xy);"..
        "float dist_p2 = length(p2 - xy);"..
        "bool nearestp1 = dot(xy - p1, p2 - p1) < 0.0;"..
        "bool nearestp2 = dot(xy - p2, p1 - p2) < 0.0;"..
        "float dist = mix(mix(dist_p2, dist_p1, nearestp1), dist_line, !nearestp1 && !nearestp2);"..
        "col = vec4(line_colour.stp, line_colour.q * (1.0 - smoothstep(line_thickness, line_thickness + 0.5, dist)));"..
      "}"
        )
      )
      lineprogram:setattribute(0, 1, true, false, 2, 0, 2)
      local linebuffer = bolt.createshaderbuffer("\xFF\xFF\x01\xFF\x01\x01\xFF\xFF\x01\x01\xFF\x01")
      linesurfacesize = 100
      local linesurface = bolt.createsurface(linesurfacesize, linesurfacesize)
      lineprogram:setuniform2f(0, linesurfacesize, linesurfacesize)
      lineprogram:setuniform4f(2, 66/255, 222/255, 236/255, 1) -- line colour (rgba, 0.0 - 1.0)
      lineprogram:setuniform1f(3, 2) -- line thickness (px)

      -- function to redraw the hexagon to the surface
      local updatelinesurface = function (elapsed, maxtime, program, surface, surfacesize)
        linesurface:clear()
        if elapsed > maxtime then return false end
        local surfaceradius = (surfacesize - 0) / 2
        for i = 1, 6 do
          local hexradius = (surfacesize - 5) / 2
          local angle = (90 + ((i - 1) * 60)) * math.pi / 180.0
          local nextangle = (90 + (i * 60)) * math.pi / 180.0
          local x = math.cos(angle) * hexradius + surfaceradius
          local y = surfacesize - (math.sin(angle) * hexradius + surfaceradius)
          local nextx = math.cos(nextangle) * hexradius + surfaceradius
          local nexty = surfacesize - (math.sin(nextangle) * hexradius + surfaceradius)
          local timestart = maxtime * (6 - i) / 6
          local lastline = elapsed >= timestart
          if lastline then
            local length = (1.0 - ((elapsed - timestart) / (maxtime / 6))) * hexradius
            local relangle = math.atan2(nexty - y, nextx - x)
            nextx = math.cos(relangle) * length + x
            nexty = math.sin(relangle) * length + y
          end
          lineprogram:setuniform4f(1, x, y, nextx, nexty)
          lineprogram:drawtosurface(surface, linebuffer, 6)
          if lastline then return true end
        end
        return true
      end

      if buffs.sunshine.active then
        sunactive = "active"
        if not sunmax then
          sunmax = 3e+7
          sunes = t
        end
        sunel = t - sunes
      else
        sunactive = "inactive"
        sunmax = false
      end
      if buffs.tsunami.active then
        tsunamiactive = "active"
        if not tsumax then
          tsumax = 3e+7
          tsues = t
        end
        tsuel = t - tsues
      else
        tsunamiactive = "inactive"
        tsumax = false
      end
      if buffs.exsanguinate.active then
        btvalue = buffs.exsanguinate.parensnumber
        bttimer = buffs.exsanguinate.number
        if btvalue == 12 then
          btm = "12"
         else
          btm = "0"
        end
      else
        btm = "0"
        bttimer = 0
      end
      if buffs.incitefear.active then
        getimer = buffs.incitefear.number
        gevalue = buffs.incitefear.parensnumber
        if gevalue == 5 then
          gem = "5"
        else
          gem = "0"
        end
      else
          gem = 0
          getimer = 0
      end
      if buffs.animatedead.active then
        adactive = "active"
        advalue = tostring(buffs.animatedead.number)
      else
        adactive = "inactive"
      end
      if buffs.temporalanomaly.active then
        taactive = "active"
        if models.temporalanomaly.foundoncheckframe then
          print("something happened")
          taactive = "ta-activate"
        end
      else
        taactive = "inactive"
      end
      if buffs.conflagrate.active then
        confactive = "active"
      else
        confactive = "inactive"
      end
      if buffs.corruptionessence.active then
        cetimer = buffs.corruptionessence.number
        cevalue = buffs.corruptionessence.parensnumber
        if cevalue then
          if cevalue < 25 then
            cestack = "1"
          elseif cevalue < 50 then
            cestack = "2"
          elseif cevalue >= 50 then
            cestack = "3"
          end
        end
      else
        cestack = 0
        cetimer = 0
      end
      if buffs.ruin.active then
        ruinactive = "active"
      else
        ruinactive = "inactive"
      end
      if buffs.exsanguinate.number == 20 then
        activespell = "exsanguinate"
      elseif buffs.incitefear.number == 20 then
        activespell = "incite-fear"
      end
      local basegauge, width, height = bolt.createsurfacefrompng(gamagic .. intstyle .. "-base")
      local icon, width, height = bolt.createsurfacefrompng(gamagic .. "icon")
      local sun, width, height = bolt.createsurfacefrompng(gamagic .. "sunshine." .. sunactive)
      local tsu, width, height = bolt.createsurfacefrompng(gamagic .. "tsunami." .. tsunamiactive)
      local ad, width, height = bolt.createsurfacefrompng(gamagic .. "animate-dead.active")
      local ta, width, height = bolt.createsurfacefrompng(gamagic .. "temporal-anomaly." .. taactive)
      local conf, width, height = bolt.createsurfacefrompng(gamagic .. "conflagrate." .. confactive)
      local wrr, width, height = bolt.createsurfacefrompng(gamagic .. "ruin." .. ruinactive)
      local ge, width, height = bolt.createsurfacefrompng(gamagic .. "glacial-embrace." .. gem)
      local bt, width, height = bolt.createsurfacefrompng(gamagic .. "blood-tithe." .. btm)
      local ce, width, height = bolt.createsurfacefrompng(gamagic .. "corruption-essence." .. cestack)
      local cebar, width, height = bolt.createsurfacefrompng(gamagic .. "corruption-essence.cebar")
      local btbar, width, height = bolt.createsurfacefrompng(gamagic .. "blood-tithe.btbar")
      local gebar, width, height = bolt.createsurfacefrompng(gamagic .. "glacial-embrace.gebar")
      local sunbar, width, height = bolt.createsurfacefrompng(gamagic .. "sunshine.sunbar")
      local tsubar, width, height = bolt.createsurfacefrompng(gamagic .. "tsunami.tsunamibar")
      local as, width, height = bolt.createsurfacefrompng(gaspell .. activespell)
      --print("soulfire " .. tostring(buffs.soulfire.active) .. " " .. tostring(buffs.soulfire.number))

      basegauge:drawtoscreen(0, 0, 260, 44, gx, gy, gw, gh)
      barwidth = gw * 0.6
      if buffs.sunshine.active then
        updatelinesurface(sunel, sunmax, lineprogram, sun, 100)
      end
      if buffs.tsunami.active then
        updatelinesurface(tsuel, tsumax, lineprogram, tsu, 100)
      end
      sun:drawtoscreen(0, 0, 100, 100, gx + math.floor(gw * 0.79), gy - ( 45 * scale / 2), 50 * scale, 50 * scale)
      tsu:drawtoscreen(0, 0, 100, 100, gx + math.floor(gw * 0.87), gb - ( 55 * scale / 2), 50 * scale, 50 * scale)

      ce:drawtoscreen(0, 0, 81, 27, gx + math.floor(gw * 0.2), gy - (10 * scale), 20 * scale * 3, 20 * scale)
      cebar:drawtoscreen(0, 0, 98, 6, gx + math.floor(gw * 0.2), gy + (13 * scale), cetimer * 5 * scale, 6 * scale)
      btbar:drawtoscreen(0, 0, 98, 6, gx + math.floor(gw * 0.2), gy + (6 * scale) + (16 * scale), bttimer * 7.5 * scale, 2 * scale)
      gebar:drawtoscreen(0, 0, 98, 6, gx + math.floor(gw * 0.2), gy + (6 * scale) + (18 * scale), getimer * 7.5 * scale, 2 * scale)
      --sunbar:drawtoscreen(0, 0, 98, 6, gx + math.floor(gw * 0.2), gy + (6 * scale) + (23 * scale), suntimer * 5 * scale, 2 * scale)
      --tsubar:drawtoscreen(0, 0, 98, 6, gx + math.floor(gw * 0.2), gy + (6 * scale) + (26 * scale), tsunamitimer * 5 * scale, 2 * scale)

      --fsoa:drawtoscreen(0, 0, 32, 32, gx + math.floor(gw * 0.585) - ( 20 * scale), gy - ( 5 * scale / 2), 15 * scale , 15 * scale)
      if buffs.temporalanomaly.active then
        ta:drawtoscreen(0, 0, 85, 85, gx + math.floor(gw * 0.70), gy - ( 25 * scale / 2), 25 * scale, 25 * scale)
      elseif buffs.animatedead.active then
        ad:drawtoscreen(0, 0, 85, 85, gx + math.floor(gw * 0.70), gy - ( 25 * scale / 2), 25 * scale, 25 * scale)
      end
      if buffs.conflagrate.active then
        conf:drawtoscreen(0, 0, 40, 40, gx + math.floor(gw * 0.75), gy - ( 5 * scale / 2), 20 * scale, 20 * scale)
      end
      bt:drawtoscreen(0, 0, 64, 64, gx + (2 * scale), gb - ( 11 * scale), 20 * scale * 0.9, 20 * scale)
      ge:drawtoscreen(0, 0, 64, 64, gx + (30 * scale) + (1 * scale), gb - ( 11 * scale), 20 * scale * 0.9, 20 * scale)
      as:drawtoscreen(0, 0, 150, 150, gx, gy - 8 * scale, 50 * scale, 50 * scale)
    end
    --this is the end for the hidegauge check
  -- end
    --this is the end for the onrendergameview event
  -- end)
--this is the end for the onswapbuffers event
end
end)